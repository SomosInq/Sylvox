{%- liquid
  assign swiper_title = swiper_title | default: section.settings.swiper_title
  assign swiper_sub_title = swiper_sub_title | default: section.settings.swiper_sub_title
-%}

<style>
  .video-swiper-contair {
    width: 100%;
    margin: 0 auto;
    padding-bottom: 76px;
  }

  .usp-heading {
    margin-bottom: 5px;
  }

  .usp-subtext {
    margin-bottom: 0;
  }

  .video-swiper-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
  }

  .content-left {
    display: flex;
    flex-direction: column;
    max-width: 880px;
    gap: 24px;
  }

  .content-right {
    display: flex;
    gap: 10px;
  }

  .video-swiper-contair .usp-arrow {
    width: 32px;
    height: 32px;
    border: 1px solid #636363;
    border-radius: 50%;
    background: none;
    cursor: pointer;
    transition: all 0.3s ease-out;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 23px;
    color: #636363;
    line-height: 1;
    padding: 0;
  }

  .usp-arrow:hover {
    background: #297f67;
    color: #fff;
    border: none;
  }

  .video-swiper-contair .usp-arrow {
    padding-bottom: 5px;
  }

  .video-swiper-contair .usp-arrow.next {
    padding-left: 2px;
  }

  .video-blocks {
    display: flex;
    gap: 15px;
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    scroll-behavior: smooth;
    -webkit-overflow-scrolling: touch;
    scrollbar-width: none;
    padding: 20px 0;
        {% comment %} margin: 0 0 0 23%; {% endcomment %}
  }

  .video-blocks::-webkit-scrollbar {
    display: none;
  }

  .video-wrapper {
    position: relative;
    flex: 0 0 calc(20% - 10px);
    scroll-snap-align: start;
    min-width: 285px;
    transition: all 0.4s ease;
    opacity: 0;
    transform: translateY(30px);
    will-change: transform, box-shadow;
    cursor: pointer;
    border-radius: 10px;
  }

  .video-wrapper iframe {
    width: 100%;
    border-radius: 10px;
    height: 490px;
  }

  .video-wrapper video {
    width: 100%;
    border-radius: 10px;
    height: 100%;
    object-fit: cover;
  }

  .video-wrapper.animate {
    transform: translateY(0);
    opacity: 1;
  }

  @media screen and (max-width: 1235px) {
    .video-swiper-contair {
      padding-inline: 15px;
    }
  }
  @media screen and (max-width: 1024px) {
    .video-swiper-content .content-left {
      max-width: calc(100% - 100px);
    }
  }
  @media screen and (max-width: 768px) {
    .video-swiper-content {
      flex-direction: column;
      align-items: flex-start;
      gap: 20px;
    }
    .video-swiper-content .content-left {
      max-width: 100%;
    }

    .video-swiper-contair {
      padding-bottom: 45px;
    }
    .video-swiper-contair .usp-heading {
      font-size: 24px;
      padding-bottom: 0;
    }

    .content-right {
      margin-top: 10px;
    }

    .video-wrapper {
      flex: 0 0 calc(35% - 10px);
      max-width: 84%;
    }
  }
</style>

<div
  id="{{ section.id }}"
  class="section_width_{{ section.settings.section_width }}"
  style="padding: {{ section.settings.padding_top }}px {{ section.settings.padding_right }}px {{ section.settings.padding_bottom }}px {{ section.settings.padding_left }}px; margin: {{ section.settings.margin_top }}px {{ section.settings.margin_right }}px {{ section.settings.margin_bottom }}px {{ section.settings.margin_left }}px"
>
  <div class="video-swiper-contair section_content_width_{{ section.settings.section_content_width }}">
    <div class="video-swiper-content">
      <div class="content-left">
        {%- if swiper_sub_title != blank -%}
          <div class="usp-subtext">{{ swiper_sub_title }}</div>
        {%- endif -%}
        {%- if swiper_title != blank -%}
          <h2 class="usp-heading">{{ swiper_title }}</h2>
        {%- endif -%}
      </div>

      <div class="content-right">
        <button class="usp-arrow prev">‹</button>
        <button class="usp-arrow next">›</button>
      </div>
    </div>

    {%- if section.blocks.size > 0 -%}
      <div class="video-blocks">
        {%- for block in section.blocks -%}
          <div class="video-wrapper animate">
            {% if block.settings.video != blank %}
              {{
                block.settings.video
                | video_tag:
                  image_size: '500x',
                  autoplay: block.settings.autoplay,
                  loop: block.settings.loop,
                  muted: block.settings.muted,
                  controls: false
              }}

            {% elsif block.settings.video_url != blank %}
              {% assign embed_url = block.settings.video_url | replace: 'watch?v=', 'embed/' %}
              <iframe
                src="{{ embed_url | escape }}"
                frameborder="0"
                allow="autoplay; encrypted-media"
                allowfullscreen
                width="100%"
                height="490"
              ></iframe>

            {% elsif block.settings.thumbnail != blank %}
              <!-- Fallback to image if no video -->
              <img
                src="{{ block.settings.thumbnail | img_url: '800x' }}"
                alt="Video thumbnail"
                style="width: 100%; border-radius: 10px; height: 490px; object-fit: cover;"
              >

            {% else %}
              <!-- Optional: Fallback if nothing is set -->
              <div style="width: 100%; height: 490px; background: #eee; display: flex; align-items: center; justify-content: center; border-radius: 10px;">
                <p>No video or thumbnail provided</p>
              </div>
            {% endif %}
          </div>
        {%- endfor -%}
      </div>
    {%- endif -%}
  </div>
</div>
<script>
  document.querySelectorAll('video').forEach((video) => {
    video.addEventListener('click', () => {
      if (video.paused) {
        video.play();
      } else {
        video.pause();
      }
    });
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const section = document.getElementById('{{ section.id }}');
    const track = section.querySelector('.video-blocks');
    const slides = section.querySelectorAll('.video-wrapper');

    let current = 0;

    function goTo(index) {
      const slide = slides[index];
      if (!slide) return;
      track.scrollTo({ left: slide.offsetLeft - (track.offsetWidth - slide.offsetWidth) / 2, behavior: 'smooth' });
      slides.forEach((el, i) => el.classList.toggle('active', i === index));
      current = index;
    }

    const slideWidth = slides[0].offsetWidth + parseInt(getComputedStyle(slides[0]).marginRight);

    section.querySelector('.usp-arrow.prev')?.addEventListener('click', () => {
      track.scrollBy({ left: -slideWidth, behavior: 'smooth' });
    });

    section.querySelector('.usp-arrow.next')?.addEventListener('click', () => {
      track.scrollBy({ left: slideWidth, behavior: 'smooth' });
    });

    goTo(0);
  });
</script>

{% schema %}
{
  "name": "Video Swiper",
  "settings": [
    {
      "type": "select",
      "id": "section_width",
      "label": "Section Width",
      "default": "standard",
      "options": [
        { "value": "standard", "label": "50% Width" },
        { "value": "full", "label": "Full Width" }
      ]
    },
    {
      "type": "select",
      "id": "section_content_width",
      "label": "Content Width",
      "default": "standard",
      "options": [
        { "value": "standard", "label": "50% Width" },
        { "value": "full", "label": "Full Width" }
      ]
    },
    {
      "type": "range",
      "id": "padding_top",
      "label": "Padding top",
      "min": 0,
      "max": 100,
      "step": 5,
      "default": 0,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "label": "Padding bottom",
      "min": 0,
      "max": 100,
      "step": 5,
      "default": 0,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "padding_left",
      "label": "Padding left",
      "min": 0,
      "max": 100,
      "step": 5,
      "default": 0,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "padding_right",
      "label": "Padding right",
      "min": 0,
      "max": 100,
      "step": 5,
      "default": 0,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "margin_top",
      "label": "Margin top",
      "min": 0,
      "max": 100,
      "step": 5,
      "default": 0,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "margin_bottom",
      "label": "Margin bottom",
      "min": 0,
      "max": 100,
      "step": 5,
      "default": 0,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "margin_left",
      "label": "Margin left",
      "min": 0,
      "max": 100,
      "step": 5,
      "default": 0,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "margin_right",
      "label": "Margin right",
      "min": 0,
      "max": 100,
      "step": 5,
      "default": 0,
      "unit": "px"
    },
    {
      "id": "swiper_title",
      "type": "text",
      "label": "Heading",
      "default": "Sylvox Community"
    },
    {
      "id": "swiper_sub_title",
      "type": "text",
      "label": "Subtext",
      "default": "A home for all Sylvox fans to experience content, inspiration, and our beautiful technology."
    }
  ],
  "blocks": [
    {
      "type": "video_block",
      "name": "Video Block",
      "settings": [
        {
          "type": "video",
          "id": "video",
          "label": "Video"
        },
        {
          "type": "text",
          "id": "video_url",
          "label": "Video URL (YouTube or Vimeo)"
        },
        {
          "type": "image_picker",
          "id": "thumbnail",
          "label": "Thumbnail image"
        },
        {
          "type": "checkbox",
          "id": "autoplay",
          "label": "Autoplay"
        },
        {
          "type": "checkbox",
          "id": "loop",
          "label": "Loop"
        },
        {
          "type": "checkbox",
          "id": "muted",
          "label": "Muted"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Video Swiper",
      "blocks": [{ "type": "video_block" }]
    }
  ]
}
{% endschema %}
