{% comment %} Tab Products Section â€“ Metafield Filtering by outdoor_tv_resolution {% endcomment %}
{{ 'section-tab-products.css' | asset_url | stylesheet_tag }}

<style>
  /* [Styling remains unchanged] */
  .tabs {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    z-index: 20;
    display: flex;
    gap: 10px;
    background: white;
    padding: 10px;
    border-radius: 9999px;
    top: var(--tab-position, 30%);
  }

  .tab-product {
    background: #fff;
    padding: 10px 15px;
    border-radius: 9999px;
    cursor: pointer;
  }

  .tab-product.active {
    background: var(--Dark-Green, #20413B);
    color: white;
  }

  .product-image {
    background: #e5e7eb;
  }

  .collection-title-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 20px 0 10px;
  }

  .collection-title-row h3 {
    border-right: 1px solid #C6C6C6;
    padding-right: 20px;
    margin-right: 20px;
  }

  .filter-btn {
    border: none;
    cursor: pointer;
    padding: 0 0 6px 0;
    {% comment %} background: #f2f2f2; {% endcomment %}
    border-radius: 4px;
    font-size: 14px;
  }

  {% comment %} .filter-btn.active {
    background: #20413B;
    color: white;
  } {% endcomment %}

  .product-filter-buttons {
    display: flex;
    gap: 12px;
    align-items: center;
  }
  .product-filter-buttons p {
  padding: 0;
  }

  .tab-product-content__banner {
    position: relative;
    width: 100%;
    height: auto;
    display: block;
  }

  .tab-product-content__banner img {
    display: block;
    width: 100%;
    height: auto;
  }

  .tab-product-content__info {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    padding: 20px;
    display: grid;
    place-items: var(--vertical-align, center) var(--horizontal-align, center);
    text-align: var(--text-align, center);
    pointer-events: none;
  }

  .tab-product-content__info-title h2 {
    font-size: 56px;
    margin: 0;
  }

  .tab-products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 20px;
    margin-top: 30px;
  }

  .product-card {
    border: none !important;
    padding: 10px;
    text-align: left;
    background: #fff;
    transition: transform 0.3s ease;
  }

  .product-card:hover {
    transform: scale(1.03);
  }

  .product-card {
  border: none;
  padding: 0;
  text-align: left;
  background: #fff;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.product-card__top {
  background: #f5f5f5;
  padding: 10px;
}

.product-image {
  width: 100%;
  max-width: 250px;
  margin: 0 auto;
}

.product-image img {
  width: 100%;
  height: auto;
  display: block;
  object-fit: contain;
}

.product-sizes {
  display: flex;
  gap: 6px;
  margin-top: 8px;
  justify-content: center;
}

.product-size-option {
  font-size: 12px;
  padding: 4px 8px;
  {% comment %} border: 1px solid #ccc; {% endcomment %}
  {% comment %} border-radius: 4px; {% endcomment %}
  {% comment %} background: white; {% endcomment %}
}

.product-meta-info {
  padding: 10px 0;
  display: flex;
  flex-direction: column;
  gap: 6px;
}

.product-meta-top {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 14px;
  color: #666;
}

.product-resolution {
  display: flex;
  align-items: center;
  gap: 4px;
}

.product-resolution img {
  width: 16px;
  height: 16px;
  object-fit: contain;
}

@media (max-width: 600px) {
  .title-filters {
    flex-wrap: wrap;
  }
  .tabs {
    position: unset;
    transform: none;
    flex-flow: column;
            width: 100%;
  }
  .tab-product {
    width: 100%;
  }
  .collection-title-row {
    flex-flow: column;
  }
}
</style>

<div class="tab-products section section_width_{{ section.settings.section_width }}"
     data-section-id="{{ section.id }}"
     style="--tab-position: {{ section.settings.tabs_position }}%; padding: {{ section.settings.padding_top }}px {{ section.settings.padding_right }}px {{ section.settings.padding_bottom }}px {{ section.settings.padding_left }}px; margin: {{ section.settings.margin_top }}px {{ section.settings.margin_right }}px {{ section.settings.margin_bottom }}px {{ section.settings.margin_left }}px">

  <div class="tabs">
    {% for block in section.blocks %}
      <div class="tab-product" data-tab-id="{{ forloop.index0 }}" data-section-id="{{ section.id }}">
        {{ block.settings.tab_label }}
      </div>
    {% endfor %}
  </div>

  {% for block in section.blocks %}
    {% assign vertical_position_class = '' %}
    {% if block.settings.vertical_position < 33 %}
      {% assign vertical_position_class = 'align-top' %}
    {% elsif block.settings.vertical_position > 66 %}
      {% assign vertical_position_class = 'align-bottom' %}
    {% else %}
      {% assign vertical_position_class = 'align-middle' %}
    {% endif %}

    <div class="tab-product-content section_content_width_{{ section.settings.section_content_width }}"
         id="tab-product-content-{{ section.id }}-{{ forloop.index0 }}">

      <div class="tab-product-content__banner">
        {% if block.settings.image %}
          <img src="{{ block.settings.image | image_url }}" alt="{{ block.settings.title }}">
        {% endif %}

        {% assign justify_class = '' %}
{% if block.settings.horizontal_position == 'left' %}
  {% assign justify_class = 'justify-start text-left' %}
{% elsif block.settings.horizontal_position == 'center' %}
  {% assign justify_class = 'justify-center text-center' %}
{% elsif block.settings.horizontal_position == 'right' %}
  {% assign justify_class = 'justify-end text-right' %}
{% endif %}

{% assign align_class = vertical_position_class %}
<div class="tab-product-content__info {{ justify_class }} {{ align_class }}"
     style="color: {{ block.settings.text_color }}; font-weight: {{ block.settings.font_weight }}; display: flex; align-items: center;">

          <div>
            {% if block.settings.inline_title %}
              <div class="tab-product-content__info-subtitle">
                <span>{{ block.settings.inline_title }}</span>
              </div>
            {% endif %}
            <div class="tab-product-content__info-title">
              <h2>{{ block.settings.title }}</h2>
            </div>
            <div class="tab-product-content__info-dec">
              {{ block.settings.description }}
            </div>
          </div>
        </div>
      </div>

      {% if block.settings.collection %}
        {%- assign all_resolutions = "All,Full Sun,Partial Sun" | split: "," -%}

        <div class="collection-title-row" style="color: {{ block.settings.collection_title_color }}">
          <div class="title-filters" style="display: flex; align-items: center; gap: 20px;">
            <h3>{{ block.settings.collection.title }}</h3>
            
            <div class="product-filter-buttons">
  <p>Filters:</p>
  {% for res in all_resolutions %}
    {% assign trimmed = res | strip %}
    {% assign handle = trimmed | handleize %}
    <button class="filter-btn{% if forloop.first %} active{% endif %}" data-filter="{{ handle }}">
      <div style="display:flex; flex-direction:row; align-items:center;">
        {% if trimmed != "All" %}
          <img src="{{ 'filter-' | append: handle | append: '.jpg' | asset_url }}" alt="{{ trimmed }}" style="width:30px; height:auto; margin-bottom:4px;" />
        {% endif %}
        <span>{{ trimmed }}</span>
      </div>
    </button>
  {% endfor %}
</div>

            
          </div>
          <a href="{{ block.settings.collection.url }}" class="button">See All</a>
        </div>

       <div class="tab-products-grid">
  {% for product in block.settings.collection.products limit: section.settings.products_count %}
    {% assign resolution = product.metafields.custom.outdoor_tv_resolution.value | strip %}
    {% assign res_handle = resolution | handleize %}
    <div class="product-card" data-resolution="{{ res_handle }}">
      <a href="{{ product.url }}">
        <!-- Grey image block -->
        <div class="product-card__top">
          <div class="product-image">
            <img src="{{ product.featured_image | image_url }}" alt="{{ product.title }}">
          </div>

          <!-- Size options if using metafields tv_size -->
{% assign tv_sizes = product.metafields.custom.tv_size.value %}
{% if tv_sizes %}
  <div class="product-sizes">
    {% for size in tv_sizes %}
      <span class="product-size-option">{{ size }}</span>
    {% endfor %}
  </div>
{% endif %}

        </div>

        <!-- Meta info -->
        <div class="product-meta-info">
          <div class="product-meta-top">
            <span class="product-collection">{{ block.settings.collection.title }}</span>
           {% assign resolutions = product.metafields.custom.outdoor_tv_resolution.value %}
{% if resolutions %}
  {% for res in resolutions %}
    {% assign res_handle = res | handleize %}
    <span class="product-resolution">
      <img src="{{ 'filter-' | append: res_handle | append: '.jpg' | asset_url }}" alt="{{ res }}" />
      {{ res }}
    </span>
  {% endfor %}
{% endif %}

          </div>

          <h4 class="product-title">{{ product.title }}</h4>
          <p class="product-price">{{ product.price | money_with_currency }}</p>
        </div>
      </a>
    </div>
  {% endfor %}
</div>


      {% endif %}

      
    </div>
  {% endfor %}
</div>

<script>
  function initializeTabbedSection(sectionId) {
    const section = document.querySelector(`[data-section-id='${sectionId}']`);
    if (!section) return;
    const tabs = section.querySelectorAll('.tab-product');
    const contents = section.querySelectorAll('.tab-product-content');
    tabs.forEach(tab => {
      tab.addEventListener('click', function () {
        const tabId = tab.getAttribute('data-tab-id');
        tabs.forEach(t => t.classList.remove('active'));
        contents.forEach(c => c.classList.remove('active'));
        tab.classList.add('active');
        section.querySelector(`#tab-product-content-${sectionId}-${tabId}`).classList.add('active');
      });
    });
    if (tabs.length > 0) {
      tabs[0].classList.add('active');
      contents[0].classList.add('active');
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.tab-products').forEach(section => {
      const sectionId = section.getAttribute('data-section-id');
      initializeTabbedSection(sectionId);

      section.querySelectorAll('.product-filter-buttons').forEach(group => {
        const buttons = group.querySelectorAll('.filter-btn');
        const grid = group.closest('.tab-product-content').querySelector('.tab-products-grid');
        const products = grid.querySelectorAll('.product-card');

        buttons.forEach(btn => {
          btn.addEventListener('click', () => {
            const filter = btn.getAttribute('data-filter');
            buttons.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');

            products.forEach(product => {
              const resolution = product.getAttribute('data-resolution');
              if (filter === 'all' || (resolution && resolution.includes(filter))) {
                product.style.display = '';
              } else {
                product.style.display = 'none';
              }
            });
          });
        });
      });
    });
  });
</script>

{% schema %}
{
  "name": "Tab Products",
  "settings": [
    { "type": "checkbox", "id": "stack_products", "label": "Stack products", "default": true },
    { "type": "select", "id": "section_width", "label": "Section Width", "default": "standard", "options": [ { "value": "standard", "label": "50% Width" }, { "value": "full", "label": "Full Width" } ] },
    { "type": "select", "id": "section_content_width", "label": "Content Width", "default": "standard", "options": [ { "value": "standard", "label": "50% Width" }, { "value": "full", "label": "Full Width" } ] },
    { "type": "range", "id": "products_count", "label": "Products to show", "min": 2, "max": 10, "step": 1, "default": 6 },
    {
      "type": "select", "id": "products_per_row_mobile", "label": "Products per row (mobile)", "default": "2",
      "options": [ { "value": "1", "label": "1" }, { "value": "2", "label": "2" } ]
    },
    {
      "type": "range", "id": "products_per_row_desktop", "label": "Products per row (desktop)", "min": 2, "max": 5, "step": 1, "default": 4
    },
    { "type": "text", "id": "subheading", "label": "Subheading" },
    { "type": "text", "id": "title", "label": "Heading", "default": "Featured collection" },
    { "type": "richtext", "id": "content", "label": "Content" },
    { "type": "url", "id": "link_url", "label": "Link URL", "info": "Defaults to collection URL." },
    { "type": "text", "id": "link_text", "label": "Link text", "default": "View all" },
    { "type": "checkbox", "id": "enable_parallax", "label": "Enable parallax effect", "default": false },
    {
      "type": "select", "id": "image_size", "label": "Image size", "default": "auto",
      "options": [
        { "value": "auto", "label": "Original image ratio" },
        { "value": "sm", "label": "Small" },
        { "value": "md", "label": "Medium" },
        { "value": "lg", "label": "Large" },
        { "value": "fill", "label": "Fill screen" }
      ]
    },
    { "type": "range", "id": "tabs_position", "label": "Tab label vertical position", "min": 0, "max": 100, "step": 1, "default": 30, "unit": "%" },
    { "type": "range", "id": "padding_top", "label": "Padding top", "min": 0, "max": 100, "step": 5, "default": 0, "unit": "px" },
    { "type": "range", "id": "padding_bottom", "label": "Padding bottom", "min": 0, "max": 100, "step": 5, "default": 0, "unit": "px" },
    { "type": "range", "id": "padding_left", "label": "Padding left", "min": 0, "max": 100, "step": 5, "default": 0, "unit": "px" },
    { "type": "range", "id": "padding_right", "label": "Padding right", "min": 0, "max": 100, "step": 5, "default": 0, "unit": "px" },
    { "type": "range", "id": "margin_top", "label": "Margin top", "min": 0, "max": 100, "step": 5, "default": 0, "unit": "px" },
    { "type": "range", "id": "margin_bottom", "label": "Margin bottom", "min": 0, "max": 100, "step": 5, "default": 0, "unit": "px" },
    { "type": "range", "id": "margin_left", "label": "Margin left", "min": 0, "max": 100, "step": 5, "default": 0, "unit": "px" },
    { "type": "range", "id": "margin_right", "label": "Margin right", "min": 0, "max": 100, "step": 5, "default": 0, "unit": "px" }
  ],
  "blocks": [
    {
      "type": "tab",
      "name": "Tab",
      "settings": [
        { "type": "text", "id": "tab_label", "label": "Tab Label" },
        { "type": "text", "id": "title", "label": "Heading" },
        { "type": "text", "id": "inline_title", "label": "Inline Title" },
        { "type": "richtext", "id": "description", "label": "Description" },
        { "type": "color", "id": "text_color", "label": "Text Color", "default": "#000000" },
        { "type": "select", "id": "font_weight", "label": "Font Weight", "default": "normal", "options": [ { "value": "normal", "label": "Normal" }, { "value": "bold", "label": "Bold" }, { "value": "lighter", "label": "Light" } ] },
        { "type": "select", "id": "horizontal_position", "label": "Horizontal Content Alignment", "default": "center", "options": [ { "value": "left", "label": "Left" }, { "value": "center", "label": "Center" }, { "value": "right", "label": "Right" } ] },
        { "type": "range", "id": "vertical_position", "label": "Vertical Content Position (%)", "min": 0, "max": 100, "step": 1, "default": 50 },
        { "type": "image_picker", "id": "image", "label": "Banner Image" },
        { "type": "collection", "id": "collection", "label": "Collection" },
        { "type": "color", "id": "collection_title_color", "label": "Collection Title Color", "default": "#000000" }
      ]
    }
  ],
  "presets": [
    {
      "name": "Tab Products",
      "category": "Custom Sections"
    }
  ]
}
{% endschema %}
