{% comment %}
  Custom section: Tabbed Slider | tabbed-slider.liquid
{% endcomment %}
<div class="tabbed-slider" id="{{ section.id }}">
  <div class="tabbed-slider__tabs-wrapper">
    <div class="tabbed-slider__tabs">
      {% assign tab_refs = '' %}
      {% for block in section.blocks %}
        {% if block.type == 'tab' %}
          {% assign tab_refs = tab_refs | append: block.settings.tab_reference | append: ',' %}
          <div class="tabbed-slider__tab-wrapper">
            <button
              class="tabbed-slider__tab{% if forloop.first %} is-active{% endif %}"
              data-tab-button="{{ block.settings.tab_reference }}"
              {{ block.shopify_attributes }}
            >
              {{ block.settings.tab_label }}
            </button>
            <div class="tabbed-slider__underline-group">
              <div class="tabbed-slider__underline tabbed-slider__underline--inactive"></div>
              <div class="tabbed-slider__underline tabbed-slider__underline--active"></div>
            </div>
          </div>
        {% endif %}
      {% endfor %}
    </div>
  </div>

  {% assign tab_refs_array = tab_refs | split: ',' %}
  {% for ref in tab_refs_array %}
    {% if ref != blank %}
      <div class="tabbed-slider__tab-content{% if forloop.first %} is-active{% endif %}" data-tab-content="{{ ref }}">
        <div class="tabbed-slider__inner">
          <div class="tabbed-slider__nav tabbed-slider__nav--prev" data-prev>
            <div class="tabbed-slider__nav-arrow tabbed-slider__nav-arrow--prev">
              <svg width="14" height="24" viewBox="0 0 14 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 22L2 12L12 2" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
          </div>
          <div class="tabbed-slider__track-wrapper">
            <div class="tabbed-slider__track" data-track>
              {% for block in section.blocks %}
                {% if block.type == 'image_label' and block.settings.tab_reference == ref %}
                  <div class="tabbed-slider__card">
                    {% if block.settings.link != blank %}
                      <a href="{{ block.settings.link }}" class="tabbed-slider__link-wrapper">
                        <div class="tabbed-slider__item" {{ block.shopify_attributes }}>
                          {% if block.settings.image %}
                            <div class="tabbed-slider__image-wrapper">
                              <img
                                src="{{ block.settings.image | image_url: width: 400 }}"
                                alt="{{ block.settings.title | escape }}"
                                width="158.82"
                                height="158.82"
                                loading="lazy"
                              >
                            </div>
                          {% endif %}
                          {% if block.settings.title != blank %}
                            <p class="tabbed-slider__title">{{ block.settings.title }}</p>
                          {% endif %}
                        </div>
                      </a>
                    {% else %}
                      <div class="tabbed-slider__item" {{ block.shopify_attributes }}>
                        {% if block.settings.image %}
                          <div class="tabbed-slider__image-wrapper">
                            <img
                              src="{{ block.settings.image | image_url: width: 400 }}"
                              alt="{{ block.settings.title | escape }}"
                              width="158.82"
                              height="158.82"
                              loading="lazy"
                            >
                          </div>
                        {% endif %}
                        {% if block.settings.title != blank %}
                          <p class="tabbed-slider__title">{{ block.settings.title }}</p>
                        {% endif %}
                      </div>
                    {% endif %}
                  </div>
                {% endif %}
              {% endfor %}
            </div>
            <div class="tabbed-slider__dots" data-dots></div>
          </div>
          <div class="tabbed-slider__nav tabbed-slider__nav--next" data-next>
            <div class="tabbed-slider__nav-arrow tabbed-slider__nav-arrow--next">
              <svg width="14" height="24" viewBox="0 0 14 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M2 2L12 12L2 22" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
          </div>
        </div>
      </div>
    {% endif %}
  {% endfor %}
</div>

<style>
  .tabbed-slider {
    padding: 40px 0;
  }

  .tabbed-slider__tabs-wrapper {
    display: flex;
    justify-content: center;
    padding-top: 24px;
    position: relative;
    /* Remove border-bottom, add custom underline below */
  }

  .tabbed-slider__tabs {
    display: flex;
    gap: 80px;
    justify-content: center;
    align-items: center;
    width: 100%;
  }

  .tabbed-slider__tab-wrapper {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .tabbed-slider__tab {
    background: none;
    border: none;
    font-family: 'Questrial', sans-serif;
    font-size: 24px;
    font-weight: 400;
    padding: 0;
    cursor: pointer;
    color: #636363;
    position: relative;
    line-height: 1.2;
    transition: color 0.2s;
  }

  .tabbed-slider__tab.is-active {
    color: #1D1D1B;
  }

  .tabbed-slider__underline-group {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 1px;
    display: none;
  }

  .tabbed-slider__underline {
    display: none;
  }

  /* Custom underline for tab group */
  .tabbed-slider__tabs-wrapper:after {
    content: '';
    width: 639px;
    height: 1px;
    background-color: #636363;
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    pointer-events: none;
    z-index: 1;
  }

  /* Active underline */
  .tabbed-slider__underline--active {
    display: block;
    position: absolute;
    width: 191px;
    height: 1px;
    background: #1D1D1B;
    bottom: 0;
    left: 19px;
    z-index: 2;
    opacity: 1;
    border-radius: 0;
    transition: none;
    pointer-events: none;
  }

  .tabbed-slider__tab-content {
    display: none;
  }

  .tabbed-slider__tab-content.is-active {
    display: block;
  }

  .tabbed-slider__inner {
    display: flex;
    align-items: center;
    position: relative;
    max-width: 1608px;
    margin: 0 auto;
    justify-content: space-between;
    width: 100%;
  }

  .tabbed-slider__nav {
    flex-shrink: 0;
    cursor: pointer;
    z-index: 2;
    width: 48px;
    height: 48px;
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  @media screen and (max-width: 767px) {
    .tabbed-slider__nav {
      display: none;
    }
  }

  .tabbed-slider__nav-arrow {
    width: 14px;
    height: 24px;
  }

  .tabbed-slider__track-wrapper {
    overflow: hidden;
    flex-grow: 1;
    position: relative;
    width: 100%;
    max-width: 100%;
  }

  .tabbed-slider__track {
    display: flex;
    gap: 24px;
    transition: transform 0.3s ease;
    will-change: transform;
    align-items: center;
    width: max-content;
    margin: auto;
  }

   .tabbed-slider__tab-content.is-active {
    margin-top: 20px;
  }

  .tabbed-slider__card {
    width: 200px;
    height: 249px;
    background: #FAFAFA;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 41px;
    padding: 0;
    box-sizing: border-box;
    scroll-snap-align: start;
  }

  .tabbed-slider__link-wrapper {
    display: block;
    width: 100%;
    height: 100%;
    text-decoration: none;
    color: inherit;
  }

  .tabbed-slider__item {
    width: 100%;
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 12px;
  }

  .tabbed-slider__image-wrapper {
    width: 158.82px;
    height: 158.82px;
    margin-bottom: 0;
  }

  .tabbed-slider__image-wrapper img {
    width: 158.82px;
    height: 158.82px;
    object-fit: contain;
    display: block;
    mix-blend-mode: multiply;
  }

  .tabbed-slider__title {
    font-family: 'Roboto', sans-serif;
    font-size: 18px;
    font-weight: 400;
    color: #1D1D1B;
    text-align: center;
    margin: 0;
  }

  @media screen and (max-width: 767px) {
    .tabbed-slider__tabs-wrapper {
      padding: 20px 0;
      flex-direction: column;
      align-items: center;
      gap: 20px;
    }

    .tabbed-slider__tabs {
      width: 341px;
      gap: 20px;
      justify-content: center;
      align-items: center;
      flex-wrap: nowrap;
    }

    .tabbed-slider__tab {
      font-size: 16px;
      font-family: 'Questrial', sans-serif;
      color: #636363;
    }

    .tabbed-slider__tab.is-active {
      color: #1D1D1B;
    }

    .tabbed-slider__card {
      width: 140px;
      height: auto;
      gap: 41px;
    }

    .tabbed-slider__image-wrapper {
      width: 110px;
      height: 111px;
    }

    .tabbed-slider__image-wrapper img {
      width: 110px;
      height: 111px;
      mix-blend-mode: multiply;
    }

    .tabbed-slider__track {
      gap: 12px;
      justify-content: flex-start;
    }

    .tabbed-slider__tabs-wrapper:after {
      width: 341px;
      left: 50%;
      transform: translateX(-50%);
      background-color: #636363;
    }

    .tabbed-slider__underline--active {
      width: 191px;
      left: 19px;
      height: 1px;
      background: #1D1D1B;
    }
  }

  .tabbed-slider__dots {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-top: 24px;
    align-items: center;
    width: 100%;
  }

  .tabbed-slider__dot {
    width: 8px;
    height: 8px;
    border-radius: 4px;
    background: rgba(0, 0, 0, 0.10);
    transition: width 0.3s, border-radius 0.3s;
    display: block;
  }
  .tabbed-slider__dot--active {
    width: 72px;
    border-radius: 20px;
    background: rgba(0, 0, 0, 0.10);
  }

  @media screen and (min-width: 768px) {
       .tabbed-slider__tab-content.is-active {
    margin-top: 40px;
  }
    
  }
</style>

<script>
  (() => {
    const section = document.getElementById('{{ section.id }}');
    const tabs = section.querySelectorAll('[data-tab-button]');
    const contents = section.querySelectorAll('[data-tab-content]');

    // Carousel logic for each tab group
    section.querySelectorAll('.tabbed-slider__tab-content').forEach(tabContent => {
      const track = tabContent.querySelector('[data-track]');
      const prev = tabContent.querySelector('[data-prev]');
      const next = tabContent.querySelector('[data-next]');
      const dotsContainer = tabContent.querySelector('[data-dots]');
      const cards = Array.from(track.children);
      let currentGroup = 0;

      // Helper functions
      function getGap() {
        // gap is 32px desktop, 12px mobile
        return window.innerWidth <= 767 ? 12 : 32;
      }
      function getCardWidth() {
        const card = track.querySelector('.tabbed-slider__card');
        if (!card) return 200;
        return card.offsetWidth;
      }
      function getVisibleCount() {
        const wrapper = track.parentElement;
        const card = track.querySelector('.tabbed-slider__card');
        if (!card) return 1;
        const cardWidth = card.offsetWidth + getGap();
        // Use wrapper's width for visible area
        return Math.max(1, Math.floor(wrapper.offsetWidth / cardWidth));
      }
      function getTotalGroups() {
        const visible = getVisibleCount();
        return Math.max(1, Math.ceil(cards.length / visible));
      }
      function clampGroup(idx) {
        return Math.max(0, Math.min(idx, getTotalGroups() - 1));
      }

      function updateCarouselPosition() {
        // Shift the track using transform: translateX(-offset)
        const visible = getVisibleCount();
        const card = track.querySelector('.tabbed-slider__card');
        if (!card) return;
        const gap = getGap();
        const cardWidth = card.offsetWidth + gap;
        let offset = currentGroup * visible * cardWidth;
        // Clamp so last group doesn't overscroll
        const totalWidth = cards.length * cardWidth - gap;
        const wrapperWidth = track.parentElement.offsetWidth;
        const maxOffset = Math.max(0, totalWidth - wrapperWidth);
        if (offset > maxOffset) offset = maxOffset;
        if (offset < 0) offset = 0;
        track.style.transform = `translateX(-${offset}px)`;
        updateDots();
      }

      function updateDots() {
        const totalGroups = getTotalGroups();
        if (dotsContainer) {
          Array.from(dotsContainer.children).forEach((dot, idx) => {
            if (idx === currentGroup) {
              dot.classList.add('tabbed-slider__dot--active');
            } else {
              dot.classList.remove('tabbed-slider__dot--active');
            }
          });
        }
      }

      function renderDots() {
        if (!dotsContainer) return;
        dotsContainer.innerHTML = '';
        const totalGroups = getTotalGroups();
        for (let i = 0; i < totalGroups; i++) {
          const dot = document.createElement('div');
          dot.className = 'tabbed-slider__dot';
          dot.setAttribute('role', 'button');
          dot.setAttribute('tabindex', '0');
          dot.setAttribute('aria-label', `Go to page ${i + 1}`);
          dot.addEventListener('click', () => {
            currentGroup = i;
            updateCarouselPosition();
          });
          dot.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
              currentGroup = i;
              updateCarouselPosition();
              e.preventDefault();
            }
          });
          dotsContainer.appendChild(dot);
        }
        updateDots();
      }

      prev?.addEventListener('click', () => {
        currentGroup = clampGroup(currentGroup - 1);
        updateCarouselPosition();
      });
      next?.addEventListener('click', () => {
        currentGroup = clampGroup(currentGroup + 1);
        updateCarouselPosition();
      });

      // Touch drag support for mobile only
      if (window.innerWidth <= 767) {
        let touchStartX = null;
        let touchMoveX = null;
        let dragging = false;

        track.addEventListener('touchstart', function(e) {
          if (e.touches.length === 1) {
            touchStartX = e.touches[0].clientX;
            dragging = true;
          }
        });
        track.addEventListener('touchmove', function(e) {
          if (!dragging) return;
          if (e.touches.length === 1) {
            touchMoveX = e.touches[0].clientX;
          }
        });
        track.addEventListener('touchend', function(e) {
          if (!dragging || touchStartX === null || touchMoveX === null) {
            // Reset
            touchStartX = null;
            touchMoveX = null;
            dragging = false;
            return;
          }
          const deltaX = touchMoveX - touchStartX;
          if (Math.abs(deltaX) > 30) {
            if (deltaX < 0) {
              // Swiped left, go to next group
              currentGroup = clampGroup(currentGroup + 1);
              updateCarouselPosition();
            } else if (deltaX > 0) {
              // Swiped right, go to previous group
              currentGroup = clampGroup(currentGroup - 1);
              updateCarouselPosition();
            }
          }
          touchStartX = null;
          touchMoveX = null;
          dragging = false;
        });
      }

      // Responsive: re-render dots and reset position on resize
      function onResize() {
        renderDots();
        // Clamp currentGroup in case visible count has changed
        currentGroup = clampGroup(currentGroup);
        updateCarouselPosition();
      }
      window.addEventListener('resize', onResize);

      // Initial setup
      renderDots();
      updateCarouselPosition();
    });

    // Tab switching logic
    tabs.forEach(button => {
      button.addEventListener('click', () => {
        const tabId = button.getAttribute('data-tab-button');
        tabs.forEach(t => t.classList.remove('is-active'));
        contents.forEach(c => c.classList.remove('is-active'));
        button.classList.add('is-active');
        section.querySelector(`[data-tab-content="${tabId}"]`).classList.add('is-active');
      });
    });
  })();
</script>

{% schema %}
{
  "name": "Tabbed Slider",
  "settings": [],
  "blocks": [
    {
      "type": "tab",
      "name": "Tab",
      "settings": [
        {
          "type": "text",
          "id": "tab_reference",
          "label": "Tab Reference (unique)",
          "info": "Used to link image blocks to this tab. E.g., features, gallery, tech"
        },
        {
          "type": "text",
          "id": "tab_label",
          "label": "Tab Label"
        }
      ]
    },
    {
      "type": "image_label",
      "name": "Image Label Block",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Label Text"
        },
        {
          "type": "text",
          "id": "tab_reference",
          "label": "Tab Reference",
          "info": "Must match a Tab block's reference exactly (e.g., features)"
        },
        {
          "type": "url",
          "id": "link",
          "label": "Card Link"
        }
      ]
    }
  ],
  "max_blocks": 44,
  "presets": [
    {
      "name": "Tabbed Slider",
        "category": "Custom",
      "blocks": []
    }
  ]
}
{% endschema %}

