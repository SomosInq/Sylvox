{% schema %}
{
  "name": "Video Grid",
  "settings": [
    {
  "type": "select",
  "id": "section_width",
  "label": "Section Width",
  "default": "standard",
  "options": [
    {
      "value": "standard",
      "label": "50% Width"
    },
    {
      "value": "full",
      "label": "Full Width"
    }
  ]
},
    {
      "type": "text",
      "id": "top_title",
      "label": "Top Title",
      "default": "Sylvox Community"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Subtitle",
      "default": "A home for all Sylvox fans to experience content,"
    },
    {
      "type": "textarea",
      "id": "description",
      "label": "Description",
      "default": "inspiration, and our beautiful technology."
    },
    {
      "type": "checkbox",
      "id": "show_arrows",
      "label": "Show navigation arrows",
      "default": true
    },
    {"type": "range", "id": "padding_top", "label": "Padding top", "min": 0, "max": 100, "step": 5, "default": 0, "unit": "px"},
    {"type": "range", "id": "padding_bottom", "label": "Padding bottom", "min": 0, "max": 100, "step": 5, "default": 0, "unit": "px"},
    {"type": "range", "id": "padding_left", "label": "Padding left", "min": 0, "max": 100, "step": 5, "default": 0, "unit": "px"},
    {"type": "range", "id": "padding_right", "label": "Padding right", "min": 0, "max": 100, "step": 5, "default": 0, "unit": "px"},
    {"type": "range", "id": "margin_top", "label": "Margin top", "min": 0, "max": 100, "step": 5, "default": 0, "unit": "px"},
    {"type": "range", "id": "margin_bottom", "label": "Margin bottom", "min": 0, "max": 100, "step": 5, "default": 0, "unit": "px"},
    {"type": "range", "id": "margin_left", "label": "Margin left", "min": 0, "max": 100, "step": 5, "default": 0, "unit": "px"},
    {"type": "range", "id": "margin_right", "label": "Margin right", "min": 0, "max": 100, "step": 5, "default": 0, "unit": "px"}
  ],
  "blocks": [
    {
      "type": "video",
      "name": "Video",
      "settings": [
        {
          "type": "select",
          "id": "video_type",
          "label": "Video Type",
          "default": "youtube",
          "options": [
            {
              "value": "youtube",
              "label": "YouTube"
            },
            {
              "value": "hosted",
              "label": "External Hosted Video"
            }
          ]
        },
        {
          "type": "url",
          "id": "video_url",
          "label": "Video URL"
        },
        {
          "type": "select",
          "id": "interaction_type",
          "label": "Click Action",
          "default": "modal",
          "options": [
            {
              "value": "modal",
              "label": "Open in Modal"
            },
            {
              "value": "external",
              "label": "Open External Link"
            }
          ]
        },
        {
          "type": "image_picker",
          "id": "fallback_image",
          "label": "Fallback Image (if no video)"
        },
        {
          "type": "image_picker",
          "id": "thumbnail",
          "label": "Custom Thumbnail"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Video Grid",
      "category": "Somos Custom"
    }
  ]
}
{% endschema %}

<div class="video-grid-wrapper section_width_{{ section.settings.section_width }}" style="padding: {{ section.settings.padding_top }}px {{ section.settings.padding_right }}px {{ section.settings.padding_bottom }}px {{ section.settings.padding_left }}px; margin: {{ section.settings.margin_top }}px {{ section.settings.margin_right }}px {{ section.settings.margin_bottom }}px {{ section.settings.margin_left }}px">
  <div class="top-bar">
    <div class="top-text">
      <h4>{{ section.settings.top_title }}</h4>
      <h2>{{ section.settings.subtitle }}</h2>
      <p>{{ section.settings.description }}</p>
    </div>

    {% if section.settings.show_arrows %}
      <div class="slider-arrows">
        <button class="flickity-prev">‹</button>
        <button class="flickity-next">›</button>
      </div>
    {% endif %}
  </div>

  <div class="video-carousel" data-flickity='{"cellAlign": "left", "contain": true, "pageDots": false, "prevNextButtons": false, "draggable": false}'>
    {% for block in section.blocks %}
      {% assign video_type = block.settings.video_type %}
      {% assign video_url = block.settings.video_url %}
      {% assign interaction_type = block.settings.interaction_type %}

      <div class="carousel-cell">
        {% if video_url %}
          <div class="video-thumbnail" data-video="{{ video_url }}" data-type="{{ video_type }}" data-interaction="{{ interaction_type }}">
            <img src="{{ block.settings.thumbnail | img_url: '800x' | default: 'https://via.placeholder.com/300x530?text=Video' }}" alt="Video thumbnail">
            <div class="play-button">▶</div>
          </div>
        {% elsif block.settings.fallback_image %}
          <img src="{{ block.settings.fallback_image | img_url: '800x' }}" alt="Fallback image" class="fallback-image">
        {% endif %}
      </div>
    {% endfor %}
  </div>
</div>

<!-- Modal -->
<div id="video-modal" class="video-modal">
  <div class="modal-content">
    <span class="close-button">&times;</span>
    <div class="modal-video-wrapper">
      <iframe id="video-frame" src="" frameborder="0" allowfullscreen></iframe>
    </div>
  </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function () {
  const modal = document.getElementById("video-modal");
  const videoFrame = document.getElementById("video-frame");
  const closeButton = document.querySelector(".close-button");

  document.querySelectorAll(".video-thumbnail").forEach(thumbnail => {
    thumbnail.addEventListener("click", function () {
      const videoUrl = this.dataset.video;
      const type = this.dataset.type;
      const interaction = this.dataset.interaction || 'modal';
      let embedUrl = "";

      if (interaction === "external") {
        window.open(videoUrl, "_blank");
        return;
      }

      if (type === "youtube") {
        const youtubeId = videoUrl.includes("v=")
          ? videoUrl.split("v=")[1].split("&")[0]
          : videoUrl.split("/").pop();
        embedUrl = `https://www.youtube.com/embed/${youtubeId}?autoplay=1`;
      } else {
        embedUrl = `${videoUrl}#t=0.1`;
      }

      videoFrame.src = embedUrl;
      modal.style.display = "block";
    });
  });

  closeButton.addEventListener("click", function () {
    modal.style.display = "none";
    videoFrame.src = "";
  });

  window.addEventListener("click", function (event) {
    if (event.target == modal) {
      modal.style.display = "none";
      videoFrame.src = "";
    }
  });

  const flickityEl = document.querySelector(".video-carousel");
  const prevBtn = document.querySelector(".flickity-prev");
  const nextBtn = document.querySelector(".flickity-next");
  if (window.Flickity && flickityEl && Flickity.data(flickityEl)) {
    const flkty = Flickity.data(flickityEl);
    prevBtn?.addEventListener("click", () => flkty.previous());
    nextBtn?.addEventListener("click", () => flkty.next());
  }
});
</script>
