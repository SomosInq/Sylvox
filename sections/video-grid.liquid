{% schema %}
{
  "name": "Video Grid",
  "settings": [
    {
      "type": "text",
      "id": "top_title",
      "label": "Top Title",
      "default": "Sylvox Community"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Subtitle",
      "default": "A home for all Sylvox fans to experience content,"
    },
    {
      "type": "textarea",
      "id": "description",
      "label": "Description",
      "default": "inspiration, and our beautiful technology."
    },
    {
      "type": "checkbox",
      "id": "show_arrows",
      "label": "Show navigation arrows",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "video",
      "name": "Video",
      "settings": [
        {
          "type": "select",
          "id": "video_type",
          "label": "Video Type",
          "default": "youtube",
          "options": [
            {
              "value": "youtube",
              "label": "YouTube"
            },
            {
              "value": "hosted",
              "label": "External Hosted Video"
            }
          ]
        },
        {
          "type": "url",
          "id": "video_url",
          "label": "Video URL"
        },
        {
          "type": "image_picker",
          "id": "fallback_image",
          "label": "Fallback Image (if no video)"
        },
        {
          "type": "image_picker",
          "id": "thumbnail",
          "label": "Custom Thumbnail"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Video Grid",
      "category": "Somos Custom"
    }
  ]
}
{% endschema %}

<div class="video-grid-wrapper">
  <div class="top-text">
    <h4>{{ section.settings.top_title }}</h4>
    <h2>{{ section.settings.subtitle }}</h2>
    <p>{{ section.settings.description }}</p>
  </div>

  {% if section.settings.show_arrows %}
    <div class="slider-arrows">
      <button class="flickity-prev">‹</button>
      <button class="flickity-next">›</button>
    </div>
  {% endif %}

  <div class="video-carousel" data-flickity='{"cellAlign": "left", "contain": true, "pageDots": false, "prevNextButtons": false}'>
    {% for block in section.blocks %}
      {% assign video_type = block.settings.video_type %}
      {% assign video_url = block.settings.video_url %}

      <div class="carousel-cell">
        {% if video_url %}
          <div class="video-thumbnail" data-video="{{ video_url }}" data-type="{{ video_type }}">
            <img src="{{ block.settings.thumbnail | img_url: '800x' | default: 'https://via.placeholder.com/300x530?text=Video' }}" alt="Video thumbnail">
            <div class="play-button">▶</div>
          </div>
        {% elsif block.settings.fallback_image %}
          <img src="{{ block.settings.fallback_image | img_url: '800x' }}" alt="Fallback image" class="fallback-image">
        {% endif %}
      </div>
    {% endfor %}
  </div>
</div>

<!-- Modal -->
<div id="video-modal" class="video-modal">
  <div class="modal-content">
    <span class="close-button">&times;</span>
    <div class="modal-video-wrapper">
      <iframe id="video-frame" src="" frameborder="0" allowfullscreen></iframe>
    </div>
  </div>
</div>

<style>
.video-grid-wrapper {
  position: relative;
  padding: 40px 20px;
}
.top-text h4 {
  font-size: 14px;
  text-transform: uppercase;
  color: #666;
  margin: 0 0 10px;
}
.top-text h2 {
  font-size: 24px;
  margin: 0 0 10px;
}
.top-text p {
  max-width: 600px;
  font-size: 16px;
  color: #444;
}
.video-carousel .carousel-cell {
  width: 300px;
  margin-right: 15px;
}
.video-thumbnail {
  position: relative;
  cursor: pointer;
}
.video-thumbnail img {
  width: 100%;
  border-radius: 10px;
}
.fallback-image {
  width: 100%;
  border-radius: 10px;
}
.play-button {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: 36px;
  color: white;
  background: rgba(0,0,0,0.5);
  border-radius: 50%;
  padding: 10px 15px;
}
.slider-arrows {
  position: absolute;
  top: -40px;
  right: 20px;
  display: flex;
  gap: 10px;
}
.slider-arrows button {
  background: white;
  border: 1px solid #ccc;
  border-radius: 50%;
  width: 32px;
  height: 32px;
  font-size: 18px;
  cursor: pointer;
}
.video-modal {
  display: none;
  position: fixed;
  z-index: 9999;
  padding-top: 60px;
  left: 0; top: 0;
  width: 100%; height: 100%;
  background-color: rgba(0,0,0,0.9);
}
.modal-content {
  position: relative;
  margin: auto;
  padding: 0;
  width: 90%;
  max-width: 800px;
}
.modal-video-wrapper {
  position: relative;
  padding-bottom: 56.25%;
  height: 0;
}
.modal-video-wrapper iframe {
  position: absolute;
  top: 0; left: 0;
  width: 100%; height: 100%;
}
.close-button {
  position: absolute;
  top: 10px;
  right: 25px;
  color: #fff;
  font-size: 35px;
  font-weight: bold;
  cursor: pointer;
}
</style>

<script>
document.addEventListener("DOMContentLoaded", function () {
  const modal = document.getElementById("video-modal");
  const videoFrame = document.getElementById("video-frame");
  const closeButton = document.querySelector(".close-button");

  document.querySelectorAll(".video-thumbnail").forEach(thumbnail => {
    thumbnail.addEventListener("click", function () {
      const videoUrl = this.dataset.video;
      const type = this.dataset.type;
      let embedUrl = "";

      if (type === "youtube") {
        const youtubeId = videoUrl.includes("v=")
          ? videoUrl.split("v=")[1].split("&")[0]
          : videoUrl.split("/").pop();
        embedUrl = `https://www.youtube.com/embed/${youtubeId}?autoplay=1`;
      } else {
        embedUrl = `${videoUrl}#t=0.1`;
      }

      videoFrame.src = embedUrl;
      modal.style.display = "block";
    });
  });

  closeButton.addEventListener("click", function () {
    modal.style.display = "none";
    videoFrame.src = "";
  });

  window.addEventListener("click", function (event) {
    if (event.target == modal) {
      modal.style.display = "none";
      videoFrame.src = "";
    }
  });

  const flickityEl = document.querySelector(".video-carousel");
  const prevBtn = document.querySelector(".flickity-prev");
  const nextBtn = document.querySelector(".flickity-next");
  if (window.Flickity && flickityEl && Flickity.data(flickityEl)) {
    const flkty = Flickity.data(flickityEl);
    prevBtn?.addEventListener("click", () => flkty.previous());
    nextBtn?.addEventListener("click", () => flkty.next());
  }
});
</script>
