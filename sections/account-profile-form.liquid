{{ 'accounts.css' | asset_url | stylesheet_tag }}

<div class="account-wrapper section_content_width_{{ section.settings.section_content_width }}">
  <aside class="account-sidebar">
    {% render 'account-sidebar' %}
  </aside>

  <main class="account-content section_width_{{ section.settings.section_width }}">
    <div class="account-profile-wrapper">
      <div class="account-profile-header">
        <div class="user-info">
          <h2>
            {{ customer.first_name | default: 'User' }}
            {{ customer.last_name }}
          </h2>
          <p>Email: {{ customer.email }}</p>
          <p>{{ customer.default_address.country }}</p>
        </div>
        <div class="points-banner">
          <img
            src="{{ section.settings.points_icon | image_url }}"
            alt=""
            width="45"
            height="45"
          >
          <div class="left">
            <p class="subheading">Sylvox Membership</p>
            <p class="title">Join the club, get rewarded.</p>
            {% if section.settings.learn_more_link != blank %}
              <a href="{{ section.settings.learn_more_link }}" class="learn-more">
                {{ section.settings.learn_more_text }}
              </a>
            {% endif %}
          </div>
          <div class="right">
            <p class="balance">00</p>
            <p class="points">points</p>
            <p class="label">Points Balance ></p>
          </div>
        </div>
      </div>

      <div class="account-profile is-readonly" id="accountProfile">
        <div class="form-header">
          <h3>My Profile</h3>
          <div class="form-links">
            <a class="edit" href="#" class="edit js-edit">✎ Edit</a>
            <a href="#" class="password js-password">
              {%- if customer %}Change Password{% else %}Create Password{% endif -%}
            </a>
          </div>
        </div>

        <!-- Inline password panel -->
        <div class="password-panel" id="passwordPanel" aria-hidden="true">
          <div class="password-preview" id="passwordPreview" data-empty="true">
            <span class="password-preview__value" id="passwordPreviewValue">••••••</span>
            <button type="button" class="password-preview__toggle" id="passwordPreviewToggle" aria-pressed="false">
              Show
            </button>
          </div>

          <form id="inlinePasswordForm" novalidate>
            <label>
              New Password
              <input type="password" id="newPassword" autocomplete="new-password" minlength="6" required>
            </label>
            <label>
              Confirm Password
              <input type="password" id="confirmPassword" autocomplete="new-password" minlength="6" required>
            </label>
            <div class="password-actions">
              <button type="submit" class="btn btn--primary">Submit</button>
              <button type="button" class="btn btn--ghost js-cancel-password">Cancel</button>
            </div>
            <p class="form-hint">For your security, you’ll receive an email to confirm and set this password.</p>
            <p class="form-error" id="pwError" hidden></p>
            <p class="form-success" id="pwSuccess" hidden>
              Check your email for a secure link to finish changing your password.
            </p>
          </form>

          <!-- Hidden official Shopify recover form (sends reset email to logged-in customer) -->
          {% form 'recover_customer_password' %}
            <input type="email" name="email" value="{{ customer.email }}" hidden>
            <button type="submit" id="recoverSubmit" hidden>Send</button>
          {% endform %}
        </div>

        <form class="account-profile-form" id="accountProfileForm">
          <div>
            <label>
              Register Email
              <input type="email" value="{{ customer.email }}" placeholder="you@example.com">
            </label>

            <label class="checkbox points">
              <input type="checkbox">
              Get 200 Points for my first email subscription and receive Jackery's latest news and offers. Agree to Sylvox's Terms of Service and Privacy Policy.
            </label>
          </div>
          <div class="row">
            <label>
              First Name
              <input type="text" value="{{ customer.first_name }}" placeholder="First Name">
            </label>
            <label>
              Last Name
              <input type="text" value="{{ customer.last_name }}" placeholder="Last Name">
            </label>
          </div>

          <div>
            <label>
              Date of Birth <span class="required">*</span>
              <input type="date">
            </label>
          </div>
          <div>
            <fieldset>
              <legend>Gender</legend>
              <div class="gender-row">
                <label><input type="radio" name="gender" value="secrecy" checked> Secrecy</label>
                <label><input type="radio" name="gender" value="female"> Female</label>
                <label><input type="radio" name="gender" value="male"> Male</label>
              </div>
            </fieldset>
          </div>
          <div>
            <label>
              Phone
              <div class="phone-row">
                <input type="text" class="country-code" value="+1">
                <input type="text" placeholder="Phone Number">
              </div>
            </label>

            <label class="checkbox points">
              <input type="checkbox">
              Get 200 Points for my first email subscription and receive Jackery's latest news and offers. Agree to
              Sylvox's Terms of Service and Privacy Policy.
            </label>
          </div>
        </form>
      </div>
    </div>
  </main>
</div>

<script>
  (function () {
    const root = document.getElementById('accountProfile');
    const form = document.getElementById('accountProfileForm');
    const editBtn = root.querySelector('.js-edit');

    // Make fields readonly until Edit clicked
    const setReadonly = (readonly) => {
      form.querySelectorAll('input, select, textarea').forEach((el) => {
        if (el.type === 'radio' || el.type === 'checkbox') {
          el.disabled = readonly;
        } else {
          el.readOnly = readonly;
        }
      });
      root.classList.toggle('is-readonly', readonly);
    };
    setReadonly(true);

    editBtn.addEventListener('click', (e) => {
      e.preventDefault();
      const nowReadonly = root.classList.contains('is-readonly');
      setReadonly(!nowReadonly);
      editBtn.textContent = nowReadonly ? 'Save' : '✎ Edit';
      // Optional: handle save state here (AJAX to your app, etc.)
    });

    // Password panel logic
    const panel = document.getElementById('passwordPanel');
    const openPw = root.querySelector('.js-password');
    const cancelPw = root.querySelector('.js-cancel-password');
    const pwForm = document.getElementById('inlinePasswordForm');
    const pwError = document.getElementById('pwError');
    const pwSuccess = document.getElementById('pwSuccess');
    const preview = document.getElementById('passwordPreview');
    const previewValue = document.getElementById('passwordPreviewValue');
    const previewToggle = document.getElementById('passwordPreviewToggle');
    const newPw = document.getElementById('newPassword');
    const confirmPw = document.getElementById('confirmPassword');
    const recoverSubmit = document.getElementById('recoverSubmit');

    const showPanel = (show) => {
      panel.classList.toggle('is-open', show);
      panel.setAttribute('aria-hidden', show ? 'false' : 'true');
      if (show) newPw.focus();
    };

    const setPreview = () => {
      const val = newPw.value;
      if (!val) {
        preview.dataset.empty = 'true';
        previewValue.textContent = '••••••';
      } else {
        preview.dataset.empty = 'false';
        const isVisible = previewToggle.getAttribute('aria-pressed') === 'true';
        previewValue.textContent = isVisible ? val : '•'.repeat(Math.min(val.length, 32));
      }
    };

    openPw.addEventListener('click', (e) => {
      e.preventDefault();
      pwError.hidden = true;
      pwSuccess.hidden = true;
      newPw.value = '';
      confirmPw.value = '';
      previewToggle.setAttribute('aria-pressed', 'false');
      setPreview();
      showPanel(true);
    });

    cancelPw.addEventListener('click', () => showPanel(false));
    newPw.addEventListener('input', setPreview);
    previewToggle.addEventListener('click', () => {
      const current = previewToggle.getAttribute('aria-pressed') === 'true';
      previewToggle.setAttribute('aria-pressed', String(!current));
      previewToggle.textContent = current ? 'Show' : 'Hide';
      setPreview();
    });

    pwForm.addEventListener('submit', (e) => {
      e.preventDefault();
      pwError.hidden = true;
      pwSuccess.hidden = true;

      const a = newPw.value.trim();
      const b = confirmPw.value.trim();

      if (a.length < 6) {
        pwError.textContent = 'Password must be at least 6 characters.';
        pwError.hidden = false;
        return;
      }
      if (a !== b) {
        pwError.textContent = 'Passwords do not match.';
        pwError.hidden = false;
        return;
      }

      // Trigger Shopify recover flow (sends email to {{ customer.email }})
      // Note: We never store or transmit the raw password; this is just UI sugar.
      recoverSubmit.click();

      pwSuccess.hidden = false;
      // Clear and hide the panel + preview after a short delay
      setTimeout(() => {
        newPw.value = '';
        confirmPw.value = '';
        setPreview();
        showPanel(false);
      }, 800);
    });
  })();
</script>

{% schema %}
{
  "name": "Account Profile",
  "settings": [
    {
      "type": "select",
      "id": "section_width",
      "label": "Section Width",
      "default": "standard",
      "options": [
        { "value": "standard", "label": "50% Width" },
        { "value": "full", "label": "Full Width" }
      ]
    },
    {
      "type": "image_picker",
      "id": "points_icon",
      "label": "Icon"
    },
    {
      "type": "text",
      "id": "learn_more_text",
      "label": "'Learn More' Link Text",
      "default": "Learn more →"
    },
    {
      "type": "url",
      "id": "learn_more_link",
      "label": "'Learn More' Link URL"
    },
    {
      "type": "select",
      "id": "section_content_width",
      "label": "Content Width",
      "default": "standard",
      "options": [
        { "value": "standard", "label": "50% Width" },
        { "value": "full", "label": "Full Width" }
      ]
    }
  ]
}
{% endschema %}
