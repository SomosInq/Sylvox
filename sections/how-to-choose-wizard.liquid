{%- stylesheet -%}
/* ============== Base ============== */
.h2c{ --h2c-accent: {{ section.settings.accent_color }}; }
.h2c *{ box-sizing:border-box; }
.h2c .container{ max-width:{{ section.settings.max_width }}px; margin:0 auto; padding-inline:20px; }

/* Width utilities */
.h2c.section_width_standard{ width:50%; margin-inline:auto; }
.h2c.section_width_full{ width:100%; }
.h2c.section_content_width_full .container{ max-width:100% !important; }

/* ============== Progress ============== */
.h2c .progress{
  background:#20413B; display:flex; gap:8px; align-items:center; justify-content:center;
  padding:12px 0; margin:0 0 40px 0; flex-wrap:wrap;
}
.h2c .progress__pill{
  display:inline-flex; gap:8px; align-items:center; padding:8px 12px; border-radius:999px;
  font-size:13px; color:#fff; opacity:.85; border:1px solid transparent;
}
.h2c .progress__pill.is-active{ background:var(--h2c-accent); color:#fff; opacity:1; }
.h2c .progress__pill.is-complete{ opacity:1; }
.h2c .progress__num{ width:28px; height:28px; border-radius:999px; display:inline-grid; place-items:center; font-size:15px; background:#C6C6C6; color:#fff; }
.h2c .progress__pill.is-active .progress__num{ background: var(--Pink, #DB4B97); }
.h2c .progress__pill.is-complete .progress__num{ background: var(--Mid-Green, #336256); }

/* ============== Steps ============== */
.h2c .step{ display:none; }
.h2c .step.is-active{ display:block; animation:fadeIn .18s ease-in; }
@keyframes fadeIn{ from{opacity:0; transform:translateY(6px);} to{opacity:1; transform:translateY(0);} }
.h2c .step__head{ margin:10px 0 22px; }
.h2c .step__title{ font-size:clamp(22px,2.4vw,32px); color:#2b3b34; margin:0 0 8px; text-align:center; }
.h2c .step__sub{ font-size:17px; color:#6b7c74; text-align:center; }
.h2c .subhead{ font-size:23px; text-align:center; color:#2b3b34; margin:66px 0 14px 0; }
.h2c .card:focus{ outline:2px solid var(--h2c-accent); outline-offset:2px; }

/* Theme Editor click-through */
html.shopify-design-mode .h2c .h2c-block-handle{ pointer-events:none !important; position:static !important; }
html.shopify-design-mode .h2c [data-group="environment"] .card *{ pointer-events:none !important; }
html.shopify-design-mode .h2c [data-group="mount"] .card *{ pointer-events:none !important; }
.h2c [data-group="environment"] .card, .h2c [data-group="mount"] .card{ background:#F2F2F2; pointer-events:auto !important; position:relative; z-index:1; }

/* ============== Grid ============== */
.h2c .grid{ display:grid; gap:18px; }
.h2c .grid--1{ grid-template-columns:1fr; }
.h2c .grid--2{ grid-template-columns:repeat(2,minmax(0,1fr)); }
.h2c .grid--3{ grid-template-columns:repeat(3,minmax(0,1fr)); }
.h2c .grid--4{ grid-template-columns:repeat(4,minmax(0,1fr)); }
@media (max-width:980px){ .h2c .grid--3,.h2c .grid--4{ grid-template-columns:repeat(2,minmax(0,1fr)); } }
@media (max-width:600px){ .h2c .grid--2,.h2c .grid--3,.h2c .grid--4{ grid-template-columns:1fr; } }

/* ============== Cards ============== */
.h2c .card{ position:relative; background:#fff; border-radius:12px; border:1px solid #e6ece8; padding:16px; box-shadow:0 1px 0 rgba(0,0,0,.02); cursor:pointer; }
.h2c .card__img{ aspect-ratio:4/3; width:100%; object-fit:cover; border-radius:8px; background:#f6f8f7; }
.h2c .card__title{ font-size:18px; color:#2b3b34; margin:10px 0 4px; text-align:center; }
.h2c .card__desc{ font-size:12px; color:#6b7c74; text-align:center; }
.h2c .card__radio{
  position:absolute; right:0; bottom:12px; width:18px; height:18px; border-radius:999px;
  border:2px solid #DB4B97; background:#fff; transition:all .15s ease; margin:0 auto; left:0; display:block;
}
.h2c .step[data-step="4"] .card__radio{
  position:absolute; right:0; top:20px; bottom:12px; width:18px; height:18px; border-radius:999px;
  border:2px solid #DB4B97; background:#fff; transition:all .15s ease; margin:0 auto; left:0; display:block;
}
.h2c .card.is-selected .card__radio{ border-color:#fff; background:#DB4B97; box-shadow:0 0 0 3px #DB4B97; }

/* Step 1 look */
.h2c [data-group="environment"] .card{ border:none; box-shadow:0 8px 22px rgba(0,0,0,.06); }
.h2c [data-group="environment"] .card.is-selected{ box-shadow:0 12px 28px rgba(0,0,0,.12); }
.h2c [data-group="environment"] .card .card__radio{ position:static; display:block; margin:12px auto 0; }

/* === Step 2: card columns compare === */
.h2c .series-compare{ display:grid; grid-template-columns:220px 1fr; gap:18px; }
@media (max-width:980px){ .h2c .series-compare{ grid-template-columns:1fr; } }
.h2c .series-compare__left .left-header{ font-weight:600; font-size:13px; color:#6b7c74; margin-bottom:95px; text-align:left; }
.h2c .spec-list{ list-style:none; margin:0; padding:0; display:flex; flex-direction:column; gap:35px; }
.h2c .spec-list li{ color:#6b7c74; font-size:14px; }
.h2c .series-compare__cols{ display:grid; grid-template-columns:repeat(auto-fit, minmax(240px,1fr)); gap:18px; }
.h2c .series-card{ position:relative; background:#fff; border:1px solid #e6ece8; border-radius:12px; box-shadow:0 8px 22px rgba(0,0,0,.06); padding:18px; cursor:pointer; }
.h2c .series-card.is-selected{ border: 1px solid #e6ece8; box-shadow:0 12px 28px rgba(0,0,0,.12); }
.h2c .series-card__head{ display:flex; align-items:center; gap:10px; justify-content:center; margin-bottom:8px; }
.h2c .series-card__env{ font-size:12px; color:#6b7c74; text-align:center; margin-bottom:6px; }
.h2c .series-items{ list-style:none; margin:10px 0 30px 0; padding:0; display:flex; flex-direction:column; gap:22px; }
.h2c .series-item { text-align: center; }
.h2c .series-item img { margin: 0 auto; }
.h2c .series-item .series-cell{ gap:8px; }
.h2c [data-series-col].is-selected .card__radio{ border-color:#fff; background:#DB4B97; box-shadow:0 0 0 3px #DB4B97; }

/* === Step 3: Size + Setup chooser === */
.h2c .chooser{ max-width:720px; margin:0 auto; }
.h2c .chooser__head{ display:grid; grid-template-columns:1fr 1fr; font-size:12px; color:#6b7c74; gap:12px; margin-bottom:10px; text-align:left; padding-inline:10px; }
.h2c .chooser__head > div{ padding:6px 10px; }
.h2c .choice-list{ display:flex; flex-direction:column; gap:10px; }
.h2c .choice-row{
  display:grid; grid-template-columns:24px 1fr 1fr; align-items:center; gap:12px;
  padding:10px; border:1px solid #e9eeeb; border-radius:10px; background:#fff; box-shadow:0 1px 0 rgba(0,0,0,.02); cursor:pointer;
}
.h2c .choice-row .cell{ padding:8px 10px; }
.h2c .choice-row .radio{ width:16px; height:16px; border-radius:999px; border:2px solid #DB4B97; display:inline-block; position:relative; }
.h2c .choice-row.is-selected .radio{ border-color:#fff; background:#DB4B97; box-shadow:0 0 0 3px #DB4B97; }
.h2c .rule-note{ margin:12px auto 0; font-size:12px; color:#6b7c74; text-align:center; }

/* --- Setup list --- */
.h2c .setup-head{
  display:grid; grid-template-columns:24px 1.2fr .8fr 1.6fr;
  font-size:12px; color:#6b7c74; gap:12px; margin:18px auto 8px; max-width:900px; padding-inline:10px;
}
.h2c .setup-list{ display:flex; flex-direction:column; gap:10px; max-width:900px; margin:0 auto; }
.h2c .setup-row{
  display:grid; grid-template-columns:24px 1.2fr .8fr 1.6fr; align-items:center; gap:12px; padding:10px;
  border:1px solid #e9eeeb; border-radius:10px; background:#fff; box-shadow:0 1px 0 rgba(0,0,0,.02); cursor:pointer;
}
.h2c .setup-row .col-space, .h2c .setup-row .col-sizes, .h2c .setup-row .col-why{ white-space:nowrap; overflow:hidden; text-overflow:ellipsis; }
.h2c .setup-row .radio{ width:16px; height:16px; border-radius:999px; border:2px solid #e4d7e1; display:inline-block; }
.h2c .setup-row.is-selected .radio{ border-color:#fff; background:#DB4B97; box-shadow:0 0 0 3px #DB4B97; }
.h2c .setup-pill{ background:#fff; border:0; border-radius:10px; padding:10px 12px; box-shadow:0 1px 0 rgba(0,0,0,.02); }

@media (max-width:720px){
  .h2c .chooser__head{ grid-template-columns:1fr 1fr; }
  .h2c .choice-row{ grid-template-columns:20px 1fr 1fr; }
  .h2c .setup-head, .h2c .setup-row{ grid-template-columns:20px 1fr 1fr; }
  .h2c .setup-head .col-why{ display:none; }
  .h2c .setup-row .col-why{ grid-column:2 / span 2; margin-top:6px; }
  .h2c .setup-row{ grid-auto-rows:minmax(0,auto); grid-template-rows:auto auto; }
}

.h2c .step[data-step="4"] .card ul li{ font-size:12px; color:#6b7c74; text-align:left; list-style:disc; }
.h2c .step[data-step="4"] ul, .h2c .step[data-step="4"] ul li{ font-size:12px; color:#fff; text-align:left; list-style:disc; }
.h2c .step[data-step="4"] .table {max-width: unset;}

/* Step 4 tweaks */
.h2c .step[data-step="4"] .card__radio{ top:12px; bottom:auto; }
.h2c .step[data-step="4"] .card__img{ aspect-ratio:4/3; width:70%; object-fit:contain; border-radius:8px; margin:30px auto 0; background: none;}
.h2c .step[data-step="4"] .card__title{ font-size:14px; font-weight:600; color:#2b3b34; margin:60px 0 4px 0; text-align:left; }
.h2c .step[data-step="4"] .card__desc { font-size:12px; color:#6b7c74; text-align:left; list-style:disc; }

.step[data-step="4"] .summary-table thead th { background: #fff; }

.step[data-step="4"] .summary-table tr {
  background: #fff;
  border: 1px solid #e6ece8;
  border-radius: 12px;
  box-shadow: 0 8px 22px rgba(0, 0, 0, .06);
  padding: 18px !important;
  cursor: pointer;
}


.h2c .step[data-step="5"] .card__title{ font-size:18px; color:#2b3b34; margin:10px 0 4px; text-align:left; }
.h2c .step[data-step="5"] .card__desc {
    font-size: 12px;
    color: #6b7c74;
    text-align: left;
    margin: 0 0 20px 0 !important;
}
.h2c .step[data-step="5"] .cta {
    display: inline-flex;
    align-items: center;
    /* gap: 8px; */
    padding: 10px 16px;
    border-radius: 9999px;
    background: var(--Dark-Green, #20413B) !important;
    margin: 20px auto 0 auto !important;
    color: #fff;
    text-decoration: none;
    font-weight: 600;
    display: flex;
    max-width: 118px;
}

.h2c .step[data-step="5"] .grid--3 {
  display: flex;
}

/* ============== Tables ============== */
.h2c .table{ width:100%; border-collapse:collapse; background:#fff; border:1px solid #e6ece8; border-radius:10px; overflow:hidden; }
.h2c .table th,.h2c .table td{ font-size:13px; padding:14px; border-bottom:1px solid #eef2ef; color:#2b3b34; text-align:left; vertical-align:top; }
.h2c .table th{ font-weight:600; background:#f8faf9; }

/* Summary table ✔ / ✖ */
.h2c .summary-table td[data-yes]{ text-align:center; }
.h2c .summary-table td[data-yes="true"]::after{ content:"✓"; font-weight:700; }
.h2c .summary-table td[data-yes="false"]::after{ content:"✗"; }
.h2c .summary-table td[data-yes="true"]{ color:#1a7f5a; }
.h2c .summary-table td[data-yes="false"]{ color:#8a8f95; }

/* --- Summary table (card rows) --- */
.h2c .summary{ margin:18px auto 0; }
.h2c .summary__head{ display:grid !important; grid-template-columns:1.2fr .7fr .9fr 1.8fr; gap:10px; padding:0 6px 8px; color:#8a9891; font-size:13px; }
.h2c .summary__rows{ display:flex; flex-direction:column; gap:10px; }
.h2c .summary__row{ display:grid !important; grid-template-columns:1.2fr .7fr .9fr 1.8fr; align-items:center; padding:14px 16px; background:#fff; border:1px solid #e6ece8; border-radius:12px; box-shadow:0 8px 22px rgba(0,0,0,.06); }
.h2c .summary__cell{ font-size:14px; color:#2b3b34; }
.h2c .summary__cell--center{ text-align:center; }
.h2c .summary__yes[data-yes="true"]::after{ content:"✓"; color:#1a7f5a; font-weight:700; }
.h2c .summary__yes[data-yes="false"]::after{ content:"✗"; color:#2b3b34; opacity:.65; }
@media (max-width:720px){
  .h2c .summary__head, .h2c .summary__row{ grid-template-columns:1.2fr .6fr .6fr 1.4fr; }
}

/* Tips pills */
.h2c .tips{ display:flex; flex-direction:column; gap:8px; margin:8px auto 0; }
.h2c .tip{
  background:#173a34; color:#fff; border-radius:8px; padding:12px 16px; font-size:14px; font-weight:600;
  border:1px solid rgba(255,255,255,.08);
}

/* Real life examples */
.h2c .examples{ margin-top:12px; }
.h2c .example-card{
  background:#fff;  border-radius:12px; box-shadow:0 1px 0 rgba(0,0,0,.02); overflow:hidden; text-decoration:none; color:inherit;
}
.h2c .example-card .example__img{ width:100%; aspect-ratio:4/3; object-fit:cover; display:block; }
.h2c .example-card .example__body{ padding:10px 12px; }
.h2c .example-card .example__title{ font-size:14px; font-weight:600; color:#2b3b34; }
.h2c .example-card .example__text{ font-size:12px; color:#6b7c74; margin-top:2px; }

/* ============== Nav (Prev/Next) ============== */
.h2c .nav{
  position:sticky; bottom:0; z-index:5; background:linear-gradient(to bottom, rgba(255,255,255,0), #fff 40%); padding-top:16px;
  display:flex; justify-content:space-between; gap:12px; place-content:center;
}
.h2c .btn{ appearance:none; border:1px solid #d7e2dc; background:#fff; color:#2b3b34; padding:12px 22px; border-radius:999px; cursor:pointer; font-size:14px; font-weight:600; display:inline-flex; align-items:center; justify-content:center; box-shadow:none; }
.h2c .btn--primary{ border-radius:9999px; background:#20413B; border-color:var(--h2c-accent); color:#fff; box-shadow:0 6px 18px rgba(0,0,0,.08); }
.h2c .nav [data-prev]{ order:1; }
.h2c .nav [data-next], .h2c .nav [data-restart]{ order:2; }
.h2c .nav [data-next]{ display:inline-flex !important; }
.h2c .btn--primary.is-disabled, .h2c .btn--primary[aria-disabled="true"], .h2c .btn--primary[disabled]{ opacity:.35; pointer-events:none; background:#fff; color:#8aa099; box-shadow:none; border-color:var(--h2c-accent); }

/* Nav icons */
.h2c{ --h2c-nav-icon: {{ section.settings.nav_icon_size | default: 18 }}px; }
.h2c .btn{ display:inline-flex; align-items:center; }
.h2c .btn__icon{
  width:var(--h2c-nav-icon);
  height:var(--h2c-nav-icon);
  flex:0 0 auto;
  display:inline-block;
}
.h2c .btn__icon--left{ margin-right:8px; }
.h2c .btn__icon--right{ margin-left:8px; }
.h2c .btn__icon path{ stroke:currentColor; }

/* ============== Result ============== */
.h2c .result-card{ max-width:420px; margin:0 auto; border-radius:8px; background:#F2F2F2; padding-bottom:14px; }
.h2c .result-card .card__img{ aspect-ratio:16/10; }
.h2c .cta{ display:inline-flex; align-items:center; gap:8px; padding:10px 16px; border-radius:999px; background:var(--h2c-accent); color:#fff; text-decoration:none; font-weight:600; }
.h2c .cta + .cta{ margin-left:8px; }

.h2c .is-hidden{ display:none !important; }

/* nicer cards in the multi grid */
#h2c-results .result-card{
  background:#F2F2F2;
  border:1px solid #e6ece8;
  border-radius:12px;
  padding:40px 20px !important;
}
#h2c-results .result-card .card__img{
  aspect-ratio:4/3; width:100%; object-fit:cover; border-radius:8px; margin-bottom:10px;
}
{%- endstylesheet -%}

<div class="h2c" data-section-id="{{ section.id }}">

  {% capture h2c_prev_icon %}
  {% if section.settings.prev_icon_image != blank %}
    <img class="btn__icon btn__icon--left" src="{{ section.settings.prev_icon_image | img_url: '40x' }}" alt="">
  {% else %}
    <svg class="btn__icon btn__icon--left" viewBox="0 0 24 24" aria-hidden="true">
      <path d="M15 18l-6-6 6-6" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
    </svg>
  {% endif %}
  {% endcapture %}

  {% capture h2c_next_icon %}
  {% if section.settings.next_icon_image != blank %}
    <img class="btn__icon btn__icon--right" src="{{ section.settings.next_icon_image | img_url: '40x' }}" alt="">
  {% else %}
    <svg class="btn__icon btn__icon--right" viewBox="0 0 24 24" aria-hidden="true">
      <path d="M9 6l6 6-6 6" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
    </svg>
  {% endif %}
  {% endcapture %}

  {% capture h2c_step_labels %}
  {{ section.settings.step1_label | default: 'Environment' }}|
  {{ section.settings.step2_label | default: 'Series' }}|
  {{ section.settings.step3_label | default: 'Screen Size' }}|
  {{ section.settings.step4_label | default: 'Mounting' }}|
  {{ section.settings.step5_label | default: 'Result' }}
  {% endcapture %}
  {%- assign steps = h2c_step_labels | strip | split: "|" -%}

  <div class="progress" aria-label="Wizard progress">
    {% for label in steps %}
      <div class="progress__pill{% if forloop.index == 1 %} is-active{% endif %}" data-step-pill="{{ forloop.index }}">
        <span class="progress__num">{{ forloop.index }}</span>
        <span>{{ label }}</span>
      </div>
    {% endfor %}
  </div>

  <div class="container section_width_{{ section.settings.section_width }} section_content_width_{{ section.settings.section_content_width }}">

    <!-- ===== Step 1 ===== -->
    <section class="step is-active" data-step="1">
      <div class="step__head">
        <h2 class="step__title">{{ section.settings.step1_title }}</h2>
        <p class="step__sub">{{ section.settings.step1_sub }}</p>
      </div>

      <div class="grid grid--2" data-group="environment">
        {% for block in section.blocks %}
          {% if block.type == 'environment' %}
            {% assign env_id_for_match = block.settings.manual_id | default: block.id %}
            <article class="card"
              data-value="{{ env_id_for_match }}"
              data-label="{{ block.settings.title | escape }}"
              data-env-key="{{ block.settings.env_key | default: '' | downcase | strip }}">
              <span class="h2c-block-handle" {{ block.shopify_attributes }} aria-hidden="true"></span>
              {% if block.settings.image %}<img class="card__img" src="{{ block.settings.image | img_url: '800x' }}" alt="{{ block.settings.title | escape }}">{% endif %}
              <h3 class="card__title">{{ block.settings.title }}</h3>
              <p class="card__desc">{{ block.settings.desc }}</p>
              <span class="card__radio" aria-hidden="true"></span>
            </article>
          {% endif %}
        {% endfor %}
      </div>

      <div class="nav">
        <button class="btn btn--primary" data-next disabled>
          {{ section.settings.next_text }}{{ h2c_next_icon }}
        </button>
      </div>
    </section>

    <!-- ===== Step 2 ===== -->
    <section class="step" data-step="2">
      <div class="step__head">
        <h2 class="step__title">{{ section.settings.step2_title }}</h2>
        <p class="step__sub">{{ section.settings.step2_sub }}</p>
      </div>

      <div class="series-compare" data-series-table>
        <div class="series-compare__left">
          <div class="left-header">{{ section.settings.step2_left_header }}</div>
          <ul class="spec-list">
            <li>{{ section.settings.row_label_smart }}</li>
            <li>{{ section.settings.row_label_display }}</li>
            <li>{{ section.settings.row_label_refresh }}</li>
            <li>{{ section.settings.row_label_color }}</li>
            <li>{{ section.settings.row_label_best }}</li>
          </ul>
        </div>

        <div class="series-compare__cols">
          {% for s in section.blocks %}
            {% if s.type == 'series' %}
              {% assign sid = s.settings.manual_id | default: s.id %}
              {% assign envs = '' %}
              {% if s.settings.show_full_sun %}{% assign envs = envs | append: 'full-sun,' %}{% endif %}
              {% if s.settings.show_partial_sun %}{% assign envs = envs | append: 'partial-sun,' %}{% endif %}

              <article class="series-card"
                data-series-col="{{ sid }}"
                data-envs="{{ envs | strip }}"
                data-label="{{ s.settings.title | escape }}"
                {{ s.shopify_attributes }}>

                <div class="series-card__head">
                  {% if s.settings.series_icon %}
                    <img src="{{ s.settings.series_icon | img_url: '120x' }}" alt="{{ s.settings.title | escape }}"
                         style="width:28px;height:28px;border-radius:6px;object-fit:cover">
                  {% endif %}
                  {{ s.settings.title }}
                </div>
                <div class="series-card__env">
                  {% if s.settings.show_full_sun %}Full Sun{% endif %}
                  {% if s.settings.show_full_sun and s.settings.show_partial_sun %} &middot; {% endif %}
                  {% if s.settings.show_partial_sun %}Partial Sun{% endif %}
                </div>

                <ul class="series-items">
                  <li class="series-item" data-series-cell="{{ sid }}" data-series="{{ sid }}">
                    <div class="series-cell">
                      {% if s.settings.smart_icon %}<img src="{{ s.settings.smart_icon | img_url: '80x' }}" alt="" style="width:24px;height:24px;object-fit:contain">{% endif %}
                      <div>{{ s.settings.smart_value }}</div>
                    </div>
                  </li>
                  <li class="series-item" data-series-cell="{{ sid }}" data-series="{{ sid }}">
                    <div class="series-cell">
                      {% if s.settings.display_icon %}<img src="{{ s.settings.display_icon | img_url: '80x' }}" alt="" style="width:24px;height:24px;object-fit:contain">{% endif %}
                      <div>{{ s.settings.display_value }}</div>
                    </div>
                  </li>
                  <li class="series-item" data-series-cell="{{ sid }}" data-series="{{ sid }}">
                    <div class="series-cell">
                      {% if s.settings.refresh_icon %}<img src="{{ s.settings.refresh_icon | img_url: '80x' }}" alt="" style="width:24px;height:24px;object-fit:contain">{% endif %}
                      <div>{{ s.settings.refresh_value }}</div>
                    </div>
                  </li>
                  <li class="series-item" data-series-cell="{{ sid }}" data-series="{{ sid }}">
                    <div class="series-cell">
                      {% if s.settings.color_icon %}<img src="{{ s.settings.color_icon | img_url: '80x' }}" alt="" style="width:24px;height:24px;object-fit:contain">{% endif %}
                      <div>{{ s.settings.color_value }}</div>
                    </div>
                  </li>
                  <li class="series-item" data-series-cell="{{ sid }}" data-series="{{ sid }}">
                    <div class="series-cell">
                      {% if s.settings.best_icon %}<img src="{{ s.settings.best_icon | img_url: '80x' }}" alt="" style="width:24px;height:24px;object-fit:contain">{% endif %}
                      <div>{{ s.settings.best_value }}</div>
                    </div>
                  </li>
                </ul>

                <span class="card__radio" aria-hidden="true"></span>
              </article>
            {% endif %}
          {% endfor %}
        </div>
      </div>

      <div class="nav">
        <button class="btn" data-prev>
          {{ h2c_prev_icon }}{{ section.settings.prev_text }}
        </button>
        <button class="btn btn--primary" data-next disabled>
          {{ section.settings.next_text }}{{ h2c_next_icon }}
        </button>
      </div>
    </section>

    <!-- ===== Step 3 ===== -->
    <section class="step" data-step="3">
      <div class="step__head">
        <h2 class="step__title">{{ section.settings.step3_title }}</h2>
        <p class="step__sub">{{ section.settings.step3_sub }}</p>
      </div>

      <!-- A: Viewing distance chooser -->
      <div class="chooser" data-group="size" role="radiogroup" aria-label="Viewing distance">
        <div class="chooser__head">
          <div>{{ section.settings.distance_col }}</div>
          <div>{{ section.settings.recommended_size_col }}</div>
        </div>

        <div class="choice-list">
          {% for b in section.blocks %}
            {% if b.type == 'size_option' %}
              {% assign size_id_for_match = b.settings.manual_id | default: b.id %}
              <div class="choice-row size-row"
                   role="radio"
                   aria-checked="false"
                   data-value="{{ size_id_for_match }}"
                   data-label="{{ b.settings.recommended | escape }}">
                <span class="radio" aria-hidden="true"></span>
                <div class="cell">{{ b.settings.title }}</div>
                <div class="cell">{{ b.settings.recommended }}</div>
              </div>
            {% endif %}
          {% endfor %}
        </div>

        {% if section.settings.size_rule != blank %}
          <p class="rule-note">{{ section.settings.size_rule }}</p>
        {% endif %}
      </div>

      <!-- B: Based on outdoor setup -->
      <div class="step__head" style="margin-top:28px">
        <h3 class="subhead">{{ section.settings.setup_title }}</h3>
      </div>

      <div class="setup-head">
        <div></div>
        <div>{{ section.settings.setup_col_space }}</div>
        <div>{{ section.settings.setup_col_sizes }}</div>
        <div class="col-why">{{ section.settings.setup_col_why }}</div>
      </div>

      <div class="setup-list">
        {% for b in section.blocks %}
          {% if b.type == 'setup_option' %}
            {% assign setup_id_for_match = b.settings.manual_id | default: b.id %}
            <div class="setup-row" role="radio" aria-checked="false"
                 data-value="{{ setup_id_for_match }}" data-label="{{ b.settings.suggested_sizes | escape }}">
              <span class="radio" aria-hidden="true"></span>
              <div class="col-space">{{ b.settings.space_label }}</div>
              <div class="col-sizes setup-pill">{{ b.settings.suggested_sizes }}</div>
              <div class="col-why setup-pill">{{ b.settings.reason }}</div>
            </div>
          {% endif %}
        {% endfor %}
      </div>

      <div class="nav">
        <button class="btn" data-prev>
          {{ h2c_prev_icon }}{{ section.settings.prev_text }}
        </button>
        <button class="btn btn--primary" data-next disabled>
          {{ section.settings.next_text }}{{ h2c_next_icon }}
        </button>
      </div>
    </section>

    <!-- ===== Step 4 ===== -->
    <section class="step" data-step="4">
      <div class="step__head">
        <h2 class="step__title">{{ section.settings.step4_title }}</h2>
        <p class="step__sub">{{ section.settings.step4_sub }}</p>
      </div>

      <div class="grid grid--3" data-group="mount">
        {% for m in section.blocks %}
          {% if m.type == 'mount_option' %}
            {% assign mount_id_for_match = m.settings.manual_id | default: m.id %}
            <article class="card" data-value="{{ mount_id_for_match }}" data-label="{{ m.settings.title | escape }}">
              <span class="h2c-block-handle" {{ m.shopify_attributes }} aria-hidden="true"></span>
              <span class="card__radio" aria-hidden="true"></span>
              <h3 class="card__title">{{ m.settings.title }}</h3>
              <p class="card__desc">{{ m.settings.desc }}</p>
              {% if m.settings.image %}<img class="card__img" src="{{ m.settings.image | img_url: '600x' }}" alt="{{ m.settings.title | escape }}">{% endif %}
            </article>
          {% endif %}
        {% endfor %}
      </div>

      {% if section.settings.summary_title != blank %}
        <h3 class="subhead">{{ section.settings.summary_title }}</h3>
      {% endif %}

      <div class="summary" role="table" aria-label="Quick summary table">
        <div class="summary__head" role="row">
          <div role="columnheader">{{ section.settings.summary_col_mount }}</div>
          <div role="columnheader">{{ section.settings.summary_col_mobile }}</div>
          <div role="columnheader">{{ section.settings.summary_col_retract }}</div>
          <div role="columnheader">{{ section.settings.summary_col_best }}</div>
        </div>

        <div class="summary__rows">
          {% for r in section.blocks %}
            {% if r.type == 'summary_row' %}
              <div class="summary__row" role="row">
                <div class="summary__cell" role="cell">{{ r.settings.mount_type }}</div>
                <div class="summary__cell summary__cell--center summary__yes" role="cell" data-yes="{{ r.settings.mobile | default: false }}"></div>
                <div class="summary__cell summary__cell--center summary__yes" role="cell" data-yes="{{ r.settings.retractable | default: false }}"></div>
                <div class="summary__cell" role="cell">{{ r.settings.best_for }}</div>
              </div>
            {% endif %}
          {% endfor %}
        </div>
      </div>

      {% if section.settings.install_title != blank %}
        <h3 class="subhead">{{ section.settings.install_title }}</h3>
      {% endif %}
      <ul class="tips" role="list">
        {% for t in section.blocks %}
          {% if t.type == 'installation_tip' %}
            <li class="tip">{{ t.settings.text }}</li>
          {% endif %}
        {% endfor %}
      </ul>

      {% if section.settings.examples_title != blank %}
        <h3 class="subhead">{{ section.settings.examples_title }}</h3>
      {% endif %}
      <div class="grid grid--4 examples">
        {% for ex in section.blocks %}
          {% if ex.type == 'example_card' %}
            <a class="example-card"
               href="{{ ex.settings.link | default: '#' }}"
               {% if ex.settings.new_tab %}target="_blank" rel="noopener"{% endif %}>
              {% if ex.settings.image %}
                <img class="example__img" src="{{ ex.settings.image | img_url: '900x' }}" alt="{{ ex.settings.title | escape }}">
              {% endif %}
              <div class="example__body">
                <div class="example__title">{{ ex.settings.title }}</div>
                {% if ex.settings.text != blank %}
                  <div class="example__text">{{ ex.settings.text }}</div>
                {% endif %}
              </div>
            </a>
          {% endif %}
        {% endfor %}
      </div>

      <div class="nav">
        <button class="btn" data-prev>
          {{ h2c_prev_icon }}{{ section.settings.prev_text }}
        </button>
        <button class="btn btn--primary" data-next disabled>
          {{ section.settings.next_text }}{{ h2c_next_icon }}
        </button>
      </div>
    </section>

    <!-- ===== Step 5 (Result) ===== -->
    <section class="step" data-step="5">
      <div class="step__head">
        <h2 class="step__title">{{ section.settings.step5_title }}</h2>
        <p class="step__sub">{{ section.settings.step5_sub }}</p>
      </div>

      <div id="h2c-results" class="grid grid--3" aria-live="polite"></div>

      <div class="result-card card" id="h2c-result">
        <h3 class="card__title" id="h2c-result-title">{{ section.settings.fallback_title }}</h3>
        <p class="card__desc" id="h2c-result-desc"></p>
        <div id="h2c-result-cta" style="margin-top:12px;"></div>
        <img class="card__img" id="h2c-result-image" src="{{ section.settings.fallback_image | img_url: '800x' }}" alt="" loading="lazy">
      </div>

      <div class="nav">
        <button class="btn" data-prev>
          {{ h2c_prev_icon }}{{ section.settings.prev_text }}
        </button>
      </div>
    </section>

  </div> <!-- /.container -->

  <div style="display:none">
  {% for rule in section.blocks %}
    {% if rule.type == 'rule' %}
      {% assign product_obj = rule.settings.product %}
      <div
        data-rule
        data-env="{{ rule.settings.env_ref   | escape }}"
        data-series="{{ rule.settings.series_ref | escape }}"
        data-size="{{ rule.settings.size_ref | escape }}"
        data-mount="{{ rule.settings.mount_ref | escape }}"

        data-title="{{ rule.settings.override_title | escape }}"
        data-desc-json='{{ rule.settings.override_desc | json }}'
        data-cta="{{ rule.settings.override_cta   | escape }}"

        {% if product_obj %}
          data-ptitle="{{ product_obj.title | escape }}"
        {% endif %}

        data-url="{% if product_obj %}{{ product_obj.url }}?variant={{ product_obj.selected_or_first_available_variant.id }}{% else %}{{ rule.settings.custom_url }}{% endif %}"

        data-image="{% if rule.settings.override_image %}{{ rule.settings.override_image | img_url: '800x' }}{% elsif product_obj and product_obj.featured_image %}{{ product_obj.featured_image | img_url: '800x' }}{% endif %}"
data-vid="{% if product_obj %}{{ product_obj.selected_or_first_available_variant.id }}{% endif %}">
      </div>
    {% endif %}
  {% endfor %}

  {% for s in section.blocks %}
    {% if s.type == 'series' and s.settings.product %}
      {% assign p = s.settings.product %}
      {% assign sid = s.settings.manual_id | default: s.id %}
      {% assign idx = s.settings.size_option_index | default: '1' %}
      {% for v in p.variants %}
        {% if idx == '1' %}{% assign size_val = v.option1 %}
        {% elsif idx == '2' %}{% assign size_val = v.option2 %}
        {% else %}{% assign size_val = v.option3 %}{% endif %}
        <div data-variant-map
          data-series="{{ sid }}"
          data-size="{{ size_val | downcase | strip | replace: '"', '' | replace: "'", '' }}"
          data-vid="{{ v.id }}"
          data-url="{{ p.url }}?variant={{ v.id }}"
          data-img="{% if v.featured_media %}{{ v.featured_media | img_url: '800x' }}{% else %}{{ p.featured_image | img_url: '800x' }}{% endif %}"
          data-vtitle="{{ v.title | escape }}">
        </div>
      {% endfor %}
      <div data-series-product
        data-series="{{ sid }}"
        data-base-url="{{ p.url }}"
        data-img="{{ p.featured_image | img_url: '800x' }}"
        data-title="{{ p.title | escape }}">
      </div>
    {% endif %}
  {% endfor %}

  {% for m in section.blocks %}
    {% if m.type == 'mount_option' and m.settings.product %}
      {% assign mp = m.settings.product %}
      {% assign mid = m.settings.manual_id | default: m.id %}
      <div data-mount-product
        data-mount="{{ mid }}"
        data-url="{{ mp.url }}"
        data-img="{{ mp.featured_image | img_url: '800x' }}"
        data-title="{{ mp.title | escape }}"
        data-vid="{{ mp.selected_or_first_available_variant.id }}">
      </div>
    {% endif %}
  {% endfor %}

  {% if section.settings.candidate_collection != blank %}
    {% for pr in section.settings.candidate_collection.products %}
      {% for v in pr.variants %}
        <div
          data-candidate-variant
          data-pid="{{ pr.id }}"
          data-title="{{ pr.title | escape }}"
          data-variant-title="{{ v.title | escape }}"
          data-vid="{{ v.id }}"
          data-url="{{ pr.url }}?variant={{ v.id }}"
          data-img="{% if v.featured_media %}{{ v.featured_media | img_url: '800x' }}{% else %}{{ pr.featured_image | img_url: '800x' }}{% endif %}">
        </div>
      {% endfor %}
    {% endfor %}
  {% endif %}
  </div>

</div> <!-- /.h2c -->

<script>
(function(){
  try {
    const SECTION_ID = "{{ section.id }}";
    const ROOT_SEL   = `.h2c[data-section-id="${SECTION_ID}"]`;

    // Settings
    const FALLBACK_TITLE = {{ section.settings.fallback_title | json }};
    const DEFAULT_CTA    = {{ section.settings.default_cta    | json }};
    const FALLBACK_IMG   = {{ section.settings.fallback_image | img_url: '800x' | json }};
    const ALERT_ENV      = {{ section.settings.alert_pick_env    | json }};
    const ALERT_SERIES   = {{ section.settings.alert_pick_series | json }};
    const ALERT_SIZE     = {{ section.settings.alert_pick_size   | json }};
    const ALERT_MOUNT    = {{ section.settings.alert_pick_mount  | json }};
    const STRICT_ONLY    = {{ section.settings.strict_results_only | json }};
    const FALLBACK_MODE  = {{ section.settings.fallback_mode       | json }};
    const NO_MATCH_MSG   = {{ section.settings.no_match_message    | json }};

    let bound = false;

    function init(){
      if (bound) return;
      const root = document.querySelector(ROOT_SEL);
      if (!root) { console.warn('[H2C] root not found', ROOT_SEL); return; }

      const q  = (s)=>root.querySelector(s);
      const qa = (s)=>Array.from(root.querySelectorAll(s));

      // Wizard state
      const state = { env:null, envKey:'all', series:null, size:null, mount:null };

      // Helpers (keep hyphens so 'full-sun' matches series filtering)
      const norm = (s)=> (s||'').toString().toLowerCase().replace(/["'\s]/g,'').trim();
      const toId = (v)=> norm(v);

      // MULTI-ID + WILDCARD MATCH
      function parseIds(str){
        return (str||'').split(/[\s,|/]+/).map(norm).filter(Boolean);
      }
      function isWildcardValue(str){
        const v = norm(str);
        return v==='' || v==='*' || v==='any' || v==='all' || v==='auto';
      }
      function matches(ruleVal, currentId){
        if (isWildcardValue(ruleVal)) return true;
        const list = parseIds(ruleVal);
        if (!list.length) return true;
        if (!currentId) return false;
        return list.includes(norm(currentId));
      }

      function setNext(step, enabled){
        const stepEl = q(`.step[data-step="${step}"]`);
        if (!stepEl) return;
        const btn = stepEl.querySelector('[data-next]');
        if (!btn) return;
        if (enabled){
          btn.disabled = false; btn.removeAttribute('disabled');
          btn.setAttribute('aria-disabled', 'false'); btn.classList.remove('is-disabled');
        } else {
          btn.disabled = true; btn.setAttribute('disabled', '');
          btn.setAttribute('aria-disabled', 'true'); btn.classList.add('is-disabled');
        }
      }

      function markOnlySelected(items, selectedEl){
        items.forEach(el=>el.classList.remove('is-selected'));
        if (selectedEl) selectedEl.classList.add('is-selected');
      }

      function syncProgress(step){
        qa('[data-step-pill]').forEach(p=>{
          const n = +p.dataset.stepPill;
          p.classList.toggle('is-active',   n===step);
          p.classList.toggle('is-complete', n<step);
        });
      }

      function goto(step){
        qa('.step').forEach(s=>s.classList.remove('is-active'));
        const target = q(`.step[data-step="${step}"]`);
        if (target) target.classList.add('is-active');
        syncProgress(step);
        if (step===1) setNext(1, !!state.env);
        if (step===2) setNext(2, !!state.series);
        if (step===3) setNext(3, !!state.size);
        if (step===4) setNext(4, !!state.mount);
      }

      // Show/hide series by environment
      function syncSeriesByEnv(){
        const keyEnv = state.envKey || 'all';
        const cols = qa('[data-series-col]');
        let anyMatch = false;

        cols.forEach(th=>{
          const list = (th.dataset.envs || '')
            .toLowerCase()
            .split(',')
            .map(s=>s.trim())
            .filter(Boolean); // values like 'full-sun','partial-sun'
          const sid = th.dataset.seriesCol;
          const match = (keyEnv === 'all') ? true : list.includes(keyEnv);
          if (match) anyMatch = true;
          th.classList.toggle('is-hidden', !match);
          qa(`[data-series-cell="${sid}"]`).forEach(td=>{
            td.classList.toggle('is-hidden', !match);
          });
        });

        if (!anyMatch) {
          cols.forEach(th=>th.classList.remove('is-hidden'));
          qa('[data-series-cell]').forEach(td=>td.classList.remove('is-hidden'));
        }

        if (state.series){
          const activeTh = document.querySelector(`${ROOT_SEL} [data-series-col="${state.series.id}"]`);
          if (!activeTh || activeTh.classList.contains('is-hidden')){
            qa('[data-series-col]').forEach(el=>el.classList.remove('is-selected'));
            qa('[data-series-cell]').forEach(el=>el.classList.remove('is-selected'));
            state.series = null;
            setNext(2, false);
          }
        }
      }

      /* Bindings */
      qa('[data-group="environment"] .card').forEach(card=>{
        card.addEventListener('click', ()=>{
          const all = qa('[data-group="environment"] .card');
          markOnlySelected(all, card);

          const value    = toId(card.dataset.value);
          const label    = card.dataset.label || '';
          const explicit = toId(card.dataset.envKey);

          let envKey = 'all';
          if (explicit && explicit !== 'auto') envKey = explicit;
          else if (value === 'full-sun' || value === 'partial-sun') envKey = value;

          state.env = { id:value, label };
          state.envKey = envKey;

          setNext(1, true);
          syncSeriesByEnv();
        }, { passive:true });
      });

      q('[data-series-table]')?.addEventListener('click', (e)=>{
        const th = e.target.closest('[data-series-col]');
        const td = e.target.closest('[data-series-cell]');
        let sid = null;
        if (th && !th.classList.contains('is-hidden')) sid = th.dataset.seriesCol;
        if (!sid && td && !td.classList.contains('is-hidden')) sid = td.dataset.seriesCell;
        if (!sid) return;

        const allHeaders = qa('[data-series-col]');
        const allCells   = qa('[data-series-cell]');
        allHeaders.forEach(h=>h.classList.toggle('is-selected', h.dataset.seriesCol===sid));
        allCells.forEach(c=>c.classList.toggle('is-selected', c.dataset.seriesCell===sid));

        const header = q(`[data-series-col="${sid}"]`);
        state.series = { id: sid, label: header ? (header.dataset.label || '') : '' };
        setNext(2, true);
      });

      qa('.size-row').forEach(row=>{
        row.addEventListener('click', ()=>{
          const all = qa('.size-row'); markOnlySelected(all, row);
          state.size = { id: toId(row.dataset.value), label: row.dataset.label || '' };
          setNext(3, true);
        }, { passive:true });
      });

      qa('.setup-row').forEach(row=>{
        row.addEventListener('click', ()=>{
          const all = qa('.setup-row'); markOnlySelected(all, row);
        }, { passive:true });
      });

      const mountWrap = q('[data-group="mount"]');
      if (mountWrap){
        mountWrap.addEventListener('click', (e)=>{
          const card = e.target.closest('.card'); if (!card || !mountWrap.contains(card)) return;
          const all = qa('[data-group="mount"] .card'); markOnlySelected(all, card);
          state.mount = { id: toId(card.dataset.value), label: card.dataset.label || '' };
          setNext(4, true);
          const next4 = q('.step[data-step="4"] [data-next]');
          if (next4){ next4.disabled = false; next4.removeAttribute('disabled'); next4.setAttribute('aria-disabled', 'false'); }
        }, { passive:true });
      }

      qa('[data-next]').forEach(btn=>btn.addEventListener('click',()=>{
        const step=+btn.closest('.step').dataset.step;
        if(step===1 && !state.env)   return alert(ALERT_ENV);
        if(step===2 && !state.series) return alert(ALERT_SERIES);
        if(step===3 && !state.size)   return alert(ALERT_SIZE);
        if(step===4 && !state.mount)  return alert(ALERT_MOUNT);
        if(step===4) buildResult();
        goto(step+1);
        const restart = q('[data-restart]'); if (restart) restart.style.display = (step+1===5 ? 'inline-flex' : 'none');
      }));

      qa('[data-prev]').forEach(btn=>btn.addEventListener('click',()=>{
        const step=+btn.closest('.step').dataset.step; goto(Math.max(1, step-1));
      }));

      q('[data-restart]')?.addEventListener('click', ()=>{
        qa('.is-selected').forEach(el=>el.classList.remove('is-selected'));
        state.env = null; state.envKey='all'; state.series=null; state.size=null; state.mount=null;
        [1,2,3,4].forEach(s=>setNext(s,false));
        qa('[data-series-col]').forEach(el=>el.classList.remove('is-hidden'));
        qa('[data-series-cell]').forEach(el=>el.classList.remove('is-hidden'));
        goto(1); q('[data-restart]').style.display = 'none';
      });

// ======== MULTI-RESULT BUILDER (Final) ========
function buildResult(){
  const root = document.querySelector(ROOT_SEL);
  const q  = (s)=>root.querySelector(s);
  const qa = (s)=>Array.from(root.querySelectorAll(s));

  const resultsWrap = q('#h2c-results');
  const singleWrap  = q('#h2c-result');
  resultsWrap.innerHTML = '';

  // Selection summary (used as default description)
  const labelsDesc = [state.env?.label, state.series?.label, state.size?.label, state.mount?.label]
    .filter(Boolean).join(' • ');

  // Series → variant mapping (fallbacks if rule has no product)
  const seriesId   = state.series?.id || '';
  const sizeDigits = (state.size?.id || state.size?.label || '').toString().replace(/\D+/g,'');
  const sp         = q(`[data-series-product][data-series="${seriesId}"]`);
  const maps       = qa(`[data-variant-map][data-series="${seriesId}"]`);
  const vmap       = maps.find(el => (el.dataset.size || '').replace(/\D+/g,'') === sizeDigits);

  const baseSeriesTitle = (() => {
    const seriesTitle = sp?.dataset.title || state.series?.label || FALLBACK_TITLE;
    const vlabel = vmap?.dataset.vtitle ? ` – ${vmap.dataset.vtitle}` : '';
    return `${seriesTitle}${vlabel}`;
  })();

  const imageFromMap = vmap?.dataset.img || sp?.dataset.img || FALLBACK_IMG;
  const urlFromMap   = vmap?.dataset.url || sp?.dataset.baseUrl || '';
  const vidFromMap   = vmap?.dataset.vid || '';

  // Match rules
  const allRules = qa('[data-rule]');
  const matchedRules = allRules.filter(r =>
    matches(r.dataset.env,    (state.env?.id || state.envKey)) &&
    matches(r.dataset.series, state.series?.id) &&
    matches(r.dataset.size,   state.size?.id) &&
    matches(r.dataset.mount,  state.mount?.id)
  );

  if (matchedRules.length === 0 && (STRICT_ONLY || FALLBACK_MODE === 'none')) {
    resultsWrap.innerHTML = `<article class="result-card card">
      <h3 class="card__title">${escapeHtml(NO_MATCH_MSG)}</h3>
      <div class="card__desc">Try a different combination or add a Result rule for this selection.</div>
    </article>`;
    singleWrap?.classList.add('is-hidden');
    return;
  }

  const src = matchedRules.length ? matchedRules : [null];

  const items = src.map(rule => {
    const d = rule?.dataset || {};

    // Title: override > product title > base
    const title = (d.title || '').trim() || (d.ptitle || '').trim() || baseSeriesTitle;

    // Description: override (HTML allowed) > labels summary
    let descHtml = '';
    if (d.descJson && d.descJson !== 'null' && d.descJson !== '') {
      try { descHtml = JSON.parse(d.descJson); } catch { descHtml = d.descJson; }
    }
    if (!descHtml) descHtml = escapeHtml(labelsDesc);

    // Image: override > variant > series > fallback
    const img = (d.image || '').trim() || imageFromMap || FALLBACK_IMG;

    // Primary CTA: rule variant → series/size variant → product URL
    const tvVid    = (d.vid || '').trim() || vidFromMap;
    const url      = (d.url || '').trim() || urlFromMap;
    const ctaLabel = (d.cta || '').trim() || DEFAULT_CTA || 'Buy it now';

    let primaryCta = '';
    if (tvVid) {
      primaryCta = `<a class="cta" href="/cart/add?id=${tvVid}&quantity=1&return_to=/checkout">${ctaLabel}</a>`;
    } else if (url) {
      primaryCta = `<a class="cta" href="${url}">${ctaLabel}</a>`;
    } else {
      primaryCta = `<a class="cta" aria-disabled="true" style="opacity:.55;pointer-events:none;">${ctaLabel}</a>`;
    }

    return { title, descHtml, img, primaryCta, alt:title };
  });

  resultsWrap.innerHTML = items.map(renderCardHTML).join('');
  singleWrap?.classList.add('is-hidden');
}

function renderCardHTML(item){
  // order: title → text → image → CTA
  return `
    <article class="result-card card">
      <h3 class="card__title">${escapeHtml(item.title)}</h3>
      <div class="card__desc">${item.descHtml}</div>
      <img class="card__img" src="${item.img}" alt="${escapeHtml(item.alt)}" loading="lazy">
      <div class="cta-wrap" style="margin-top:12px;text-align:left;">
        ${item.primaryCta}
      </div>
    </article>
  `;
}
// ======== /MULTI-RESULT BUILDER (Final) ========



      function escapeHtml(str){
        return (str||'').toString()
          .replace(/&/g, "&amp;")
          .replace(/</g, "&lt;")
          .replace(/>/g, "&gt;")
          .replace(/"/g, "&quot;")
          .replace(/'/g, "&#039;");
      }

      [1,2,3,4].forEach(s=>setNext(s,false));
      goto(1);
      bound = true;
      console.log('[H2C] Init complete', { SECTION_ID, inEditor: (typeof Shopify!=='undefined' && Shopify.designMode) });
    }

    if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', init, { once:true }); } else { init(); }
    document.addEventListener('shopify:section:load', (evt) => {
      const el = evt.target;
      if (el && el.querySelector && el.querySelector(`.h2c[data-section-id="{{ section.id }}"]`)) { bound = false; init(); }
    });
  } catch (err) {
    console.error('[H2C] Wizard error:', err);
  }
})();
</script>


{% schema %}
{
  "name": "How to Choose – Wizard",
  "tag": "section",
  "class": "h2c-wrapper",
  "settings": [
    { "type": "color", "id": "accent_color", "label": "Accent color", "default": "#234f3f" },
    { "type": "range", "id": "max_width", "label": "Max width (px)", "min": 900, "max": 1600, "step": 50, "default": 1150 },

    { "type": "select", "id": "section_width", "label": "Section Width", "default": "standard", "options": [
      { "value": "standard", "label": "50% Width" }, { "value": "full", "label": "Full Width" } ] },
    { "type": "select", "id": "section_content_width", "label": "Content Width", "default": "standard", "options": [
      { "value": "standard", "label": "50% Width" }, { "value": "full", "label": "Full Width" } ] },

    { "type": "text", "id": "step1_label", "label": "Step 1 label", "default": "Environment" },
    { "type": "text", "id": "step2_label", "label": "Step 2 label", "default": "Series" },
    { "type": "text", "id": "step3_label", "label": "Step 3 label", "default": "Screen Size" },
    { "type": "text", "id": "step4_label", "label": "Step 4 label", "default": "Mounting" },
    { "type": "text", "id": "step5_label", "label": "Step 5 label", "default": "Result" },

    { "type": "image_picker", "id": "prev_icon_image", "label": "Previous button icon (optional)" },
    { "type": "image_picker", "id": "next_icon_image", "label": "Next button icon (optional)" },
    { "type": "range", "id": "nav_icon_size", "label": "Nav icon size (px)", "min": 12, "max": 28, "step": 1, "default": 18 },

    { "type": "text", "id": "prev_text", "label": "Previous button text", "default": "Previous" },
    { "type": "text", "id": "next_text", "label": "Next button text", "default": "Next" },
    { "type": "text", "id": "restart_text", "label": "Restart button text", "default": "Start again" },

    { "type": "checkbox", "id": "strict_results_only", "label": "Only show a result when a rule matches", "default": false },
    { "type": "select", "id": "fallback_mode", "label": "When no rule matches", "default": "series",
      "options": [
        { "value": "series", "label": "Use selected series/size mapping" },
        { "value": "none",   "label": "Show nothing (message)" }
      ]
    },
    { "type": "text", "id": "no_match_message", "label": "No-match message", "default": "No configured result for this selection." },

    { "type": "text", "id": "alert_pick_env", "label": "Alert: pick environment", "default": "Please choose your installation environment." },
    { "type": "text", "id": "alert_pick_series", "label": "Alert: pick series", "default": "Please choose the right series." },
    { "type": "text", "id": "alert_pick_size", "label": "Alert: pick size", "default": "Please choose a viewing distance." },
    { "type": "text", "id": "alert_pick_mount", "label": "Alert: pick mount", "default": "Please choose your mounting option." },

    { "type": "text", "id": "step1_title", "label": "Step 1 title", "default": "Choose Your Installation Environment" },
    { "type": "textarea", "id": "step1_sub", "label": "Step 1 subtitle", "default": "Where do you plan to place the TV? Select the scene that best fits your space." },

    { "type": "text", "id": "step2_title", "label": "Step 2 title", "default": "Choose the Right Series for Your Needs" },
    { "type": "textarea", "id": "step2_sub", "label": "Step 2 subtitle", "default": "Select what fits you best." },
    { "type": "text", "id": "step2_left_header", "label": "Step 2 left header", "default": "Specifications" },

    { "type": "text", "id": "row_label_smart", "label": "Row label: Smart System", "default": "Smart System" },
    { "type": "text", "id": "row_label_display", "label": "Row label: Display Type", "default": "Display Type" },
    { "type": "text", "id": "row_label_refresh", "label": "Row label: Refresh Rate", "default": "Refresh Rate" },
    { "type": "text", "id": "row_label_color", "label": "Row label: Color Accuracy", "default": "Color Accuracy" },
    { "type": "text", "id": "row_label_best", "label": "Row label: Best For", "default": "Best For" },

    { "type": "text", "id": "step3_title", "label": "Step 3 title", "default": "Choose the Right Screen Size" },
    { "type": "textarea", "id": "step3_sub", "label": "Step 3 subtitle", "default": "How to choose:" },
    { "type": "text", "id": "distance_col", "label": "Distance column header", "default": "Viewing Distance" },
    { "type": "text", "id": "recommended_size_col", "label": "Recommended size column header", "default": "Recommended Screen Size" },
    { "type": "text", "id": "size_rule", "label": "Rule of thumb text", "default": "Rule of Thumb: Viewing distance (in inches) ÷ 1.5 ≈ optimal screen size." },

    { "type": "text", "id": "setup_title", "label": "Step 3B title", "default": "Choose Based on Your Outdoor Setup:" },
    { "type": "text", "id": "setup_col_space", "label": "Setup column: Outdoor Space Type", "default": "Outdoor Space Type" },
    { "type": "text", "id": "setup_col_sizes", "label": "Setup column: Suggest Size(s)", "default": "Suggest Size(s)" },
    { "type": "text", "id": "setup_col_why", "label": "Setup column: Why?", "default": "Why?" },

    /* New Step 3 subsections */
    { "type": "text", "id": "summary_title", "label": "Quick Summary table title", "default": "Quick Summary Table" },
    { "type": "text", "id": "summary_col_mount", "label": "Summary column: Mount Type", "default": "Mount Type" },
    { "type": "text", "id": "summary_col_mobile", "label": "Summary column: Mobile?", "default": "Mobile?" },
    { "type": "text", "id": "summary_col_retract", "label": "Summary column: Retractable?", "default": "Retractable?" },
    { "type": "text", "id": "summary_col_best", "label": "Summary column: Best For", "default": "Best For" },

    { "type": "text", "id": "install_title", "label": "Installation tips title", "default": "Installation Tip" },

    { "type": "text", "id": "examples_title", "label": "Real life examples title", "default": "Real Life Example" },

    { "type": "text", "id": "step4_title", "label": "Step 4 title", "default": "Choose Your Mounting Option" },
    { "type": "textarea", "id": "step4_sub", "label": "Step 4 subtitle", "default": "Pick the setup style that fits your space." },

    { "type": "text", "id": "step5_title", "label": "Step 5 title", "default": "Your Result" },
    { "type": "textarea", "id": "step5_sub", "label": "Step 5 subtitle", "default": "Here’s the best match for your setup." },
    { "type": "text", "id": "default_cta", "label": "Default CTA label", "default": "Buy it now" },
    { "type": "image_picker", "id": "fallback_image", "label": "Fallback result image" },
    { "type": "text", "id": "fallback_title", "label": "Fallback result title", "default": "Recommended setup" },

    { "type": "collection", "id": "candidate_collection", "label": "Fallback products collection (optional)", "info": "If no rule/series mapping matches, we’ll pick from here by size." }
  ],
  "blocks": [
    { "type": "environment", "name": "Environment", "settings": [
      { "type": "text", "id": "manual_id", "label": "Manual ID (e.g. full-sun / partial-sun)", "default": "manual-id" },
      { "type": "text", "id": "env_key", "label": "Sun key for filtering (full-sun / partial-sun)", "default": "auto" },
      { "type": "text", "id": "title", "label": "Title", "default": "Full Sun (Direct Sunlight)" },
      { "type": "textarea", "id": "desc", "label": "Description", "default": "For areas completely exposed to sunlight." },
      { "type": "image_picker", "id": "image", "label": "Image" }
    ]},
    { "type": "series", "name": "Series", "settings": [
      { "type": "text", "id": "manual_id", "label": "Manual ID (e.g. deck-pro)", "default": "manual-id" },
      { "type": "text", "id": "title", "label": "Series name", "default": "Deck Pro QLED 2.0" },
      { "type": "image_picker", "id": "series_icon", "label": "Series icon" },
      { "type": "paragraph", "content": "Visibility" },
      { "type": "checkbox", "id": "show_full_sun", "label": "Full Sun", "default": true },
      { "type": "checkbox", "id": "show_partial_sun", "label": "Partial Sun", "default": true },
      { "type": "header", "content": "Smart System" },
      { "type": "text", "id": "smart_value", "label": "Value", "default": "Google TV" },
      { "type": "image_picker", "id": "smart_icon", "label": "Icon (optional)" },
      { "type": "header", "content": "Display Type" },
      { "type": "text", "id": "display_value", "label": "Value", "default": "LED" },
      { "type": "image_picker", "id": "display_icon", "label": "Icon (optional)" },
      { "type": "header", "content": "Refresh Rate" },
      { "type": "text", "id": "refresh_value", "label": "Value", "default": "60HZ" },
      { "type": "image_picker", "id": "refresh_icon", "label": "Icon (optional)" },
      { "type": "header", "content": "Color Accuracy" },
      { "type": "text", "id": "color_value", "label": "Value", "default": "Good" },
      { "type": "image_picker", "id": "color_icon", "label": "Icon (optional)" },
      { "type": "header", "content": "Best For" },
      { "type": "text", "id": "best_value", "label": "Value", "default": "Smart & Value" },
      { "type": "image_picker", "id": "best_icon", "label": "Icon (optional)" },
      { "type": "header", "content": "Product binding" },
      { "type": "product", "id": "product", "label": "Series product" },
      { "type": "select", "id": "size_option_index", "label": "Which option is Size?", "default": "1",
        "options": [ { "value": "1", "label": "Option 1" }, { "value": "2", "label": "Option 2" }, { "value": "3", "label": "Option 3" } ] }
    ]},
    { "type": "size_option", "name": "Screen size", "settings": [
      { "type": "text", "id": "manual_id", "label": "Manual ID (e.g. 55, 65)", "default": "manual-id" },
      { "type": "text", "id": "title", "label": "Viewing distance label", "default": "6–8 ft (1.8–2.4 m)" },
      { "type": "text", "id": "recommended", "label": "Recommended size", "default": "55\"" }
    ]},
    { "type": "setup_option", "name": "Setup row", "settings": [
      { "type": "text", "id": "manual_id", "label": "Manual ID (optional)", "default": "manual-id" },
      { "type": "text", "id": "space_label", "label": "Outdoor space type", "default": "Medium deck or pergola" },
      { "type": "text", "id": "suggested_sizes", "label": "Suggest size(s)", "default": "55\"/65\"" },
      { "type": "text", "id": "reason", "label": "Why?", "default": "Balanced size for multi-person viewing" }
    ]},
    { "type": "mount_option", "name": "Mount option", "settings": [
      { "type": "text", "id": "manual_id", "label": "Manual ID (e.g. wall, ceiling, stand)", "default": "manual-id" },
      { "type": "text", "id": "title", "label": "Title", "default": "Wall Mount" },
      { "type": "html", "id": "desc", "label": "Description", "default": "Best for solid walls, patios, or decks." },
      { "type": "image_picker", "id": "image", "label": "Image" },
      { "type": "product", "id": "product", "label": "Mount product (optional)" }
    ]},

    /* NEW: Quick Summary rows (Step 3) */
    { "type": "summary_row", "name": "Summary row", "settings": [
      { "type": "text", "id": "mount_type", "label": "Mount Type", "default": "Wall Mount" },
      { "type": "checkbox", "id": "mobile", "label": "Mobile?", "default": false },
      { "type": "checkbox", "id": "retractable", "label": "Retractable?", "default": false },
      { "type": "text", "id": "best_for", "label": "Best For", "default": "Everyday setups, patios" }
    ]},

    /* NEW: Installation tips (Step 3) */
    { "type": "installation_tip", "name": "Installation tip", "settings": [
      { "type": "text", "id": "text", "label": "Tip text", "default": "All Sylvox TVs follow VESA standard mounting" }
    ]},

    /* NEW: Real life example cards (Step 3) */
    { "type": "example_card", "name": "Real life example", "settings": [
      { "type": "image_picker", "id": "image", "label": "Image" },
      { "type": "text", "id": "title", "label": "Title", "default": "Lounge-style Deck?" },
      { "type": "text", "id": "text", "label": "Caption", "default": "Wall Mount or Lift Cabinet" },
      { "type": "url", "id": "link", "label": "Link URL" },
      { "type": "checkbox", "id": "new_tab", "label": "Open in new tab", "default": false }
    ]},

    { "type": "rule", "name": "Result rule", "settings": [
      { "type": "header", "content": "Match criteria (enter manual or block IDs)" },
      { "type": "text", "id": "env_ref", "label": "Environment ID", "default": "auto" },
      { "type": "text", "id": "series_ref", "label": "Series ID", "default": "series-ref" },
      { "type": "text", "id": "size_ref", "label": "Size ID", "default": "size-ref" },
      { "type": "text", "id": "mount_ref", "label": "Mount ID (optional)", "default": "mount-ref" },
      { "type": "header", "content": "Select Product Result" },
      { "type": "product", "id": "product", "label": "Product (optional – overrides variant mapping)" },
      { "type": "header", "content": "Product Result (Override Settings)" },
      { "type": "image_picker", "id": "override_image", "label": "Override image (optional)" },
      { "type": "url", "id": "custom_url", "label": "Custom link (overrides product URL)" },
      { "type": "text", "id": "override_title", "label": "Override result title", "default": "title" },
      { "type": "textarea", "id": "override_desc", "label": "Override result text (under title)" },
      { "type": "text", "id": "override_cta", "label": "Override CTA label", "default": "cta" }
    ]}
  ],
  "max_blocks": 200,
  "presets": [{ "name": "How to Choose – Wizard", "category": "Custom" }]
}
{% endschema %}
