{% comment %}
  HOW TO CHOOSE – Step Wizard (Shopify-compatible)
  - Step 1: cards with centered text/radio, subtle shadows, no Previous button
  - Step 2: comparison TABLE — 1 block per Series; each block holds its 5 specs (+ optional icons)
           columns filter by Environment from Step 1 (full-sun / partial-sun)
  - Step 3: TWO tables
      A) Viewing distance (size_option blocks)
      B) Choose Based on Your Outdoor Setup (setup_option blocks)
     Selecting a row in either table enables Next.
  - Step 4: mounting cards
  - Step 5: result (rule dataset)
  - Width utilities from schema: section_width_* & section_content_width_*
{% endcomment %}

{%- stylesheet -%}
/* ============== Base ============== */
.h2c { --h2c-accent: {{ section.settings.accent_color }}; }
.h2c * { box-sizing: border-box; }
.h2c .container { max-width: {{ section.settings.max_width }}px; margin: 0 auto; padding-inline: 20px; }

/* Width utilities driven by schema */
.h2c.section_width_standard { width: 50%; margin-inline: auto; }
.h2c.section_width_full     { width: 100%; }
.h2c.section_content_width_standard .container { max-width: 50% !important; }
.h2c.section_content_width_full .container     { max-width: 100% !important; }

/* Progress */
.h2c .progress { display:flex; gap:8px; align-items:center; justify-content:center; padding:12px 0 24px; flex-wrap:wrap; }
.h2c .progress__pill { display:inline-flex; align-items:center; gap:8px; padding:8px 12px; border-radius:999px; font-size:13px; background:#eef2ef; color:#2b3b34; opacity:.85; }
.h2c .progress__pill.is-active { background:var(--h2c-accent); color:#fff; opacity:1; }
.h2c .progress__num { width:18px; height:18px; border-radius:999px; display:inline-grid; place-items:center; font-size:11px; background:rgba(0,0,0,.15); color:#fff; }
.h2c .progress__pill.is-active .progress__num { background:rgba(255,255,255,.25); }

/* Steps */
.h2c .step { display:none; }
.h2c .step.is-active { display:block; animation:fadeIn .18s ease-in; }
@keyframes fadeIn { from { opacity:0; transform:translateY(6px);} to { opacity:1; transform:translateY(0);} }
.h2c .step__head { margin:10px 0 22px; }
.h2c .step__title { font-size:clamp(22px,2.4vw,32px); font-weight:600; color:#2b3b34; margin:0 0 8px; text-align:center; }
.h2c .step__sub { font-size:12px; color:#6b7c74; text-align:center; }

/* Grid */
.h2c .grid { display:grid; gap:18px; }
.h2c .grid--1 { grid-template-columns:1fr; }
.h2c .grid--2 { grid-template-columns:repeat(2,minmax(0,1fr)); }
.h2c .grid--3 { grid-template-columns:repeat(3,minmax(0,1fr)); }
.h2c .grid--4 { grid-template-columns:repeat(4,minmax(0,1fr)); }
@media (max-width:980px){ .h2c .grid--4,.h2c .grid--3{ grid-template-columns:repeat(2,minmax(0,1fr)); } }
@media (max-width:600px){ .h2c .grid--2,.h2c .grid--3,.h2c .grid--4{ grid-template-columns:1fr; } }

/* Cards (Step 1 + Step 4) */
.h2c .card{ position:relative; background:#fff; border-radius:12px; border:1px solid #e6ece8; padding:16px; box-shadow:0 1px 0 rgba(0,0,0,.02);}
.h2c .card__img{ aspect-ratio:4/3; width:100%; object-fit:cover; border-radius:8px; background:#f6f8f7; }
.h2c .card__title{ font-size:14px; font-weight:600; color:#2b3b34; margin:10px 0 4px; text-align:center; }
.h2c .card__desc{ font-size:12px; color:#6b7c74; text-align:center; }
.h2c .card__radio{ position:absolute; right:12px; bottom:12px; width:18px; height:18px; border-radius:999px; border:2px solid #c7d3cc; background:#fff; }
.h2c [data-group="environment"] .card{ border:none; box-shadow:0 8px 22px rgba(0,0,0,.06); }
.h2c [data-group="environment"] .card.is-selected{ border-color:transparent; box-shadow:0 12px 28px rgba(0,0,0,.12); }
.h2c [data-group="environment"] .card .card__radio{ position:static; display:block; margin:12px auto 0; }

/* Table */
.h2c .table{ width:100%; border-collapse:collapse; background:#fff; border:1px solid #e6ece8; border-radius:10px; overflow:hidden; }
.h2c .table th,.h2c .table td{ font-size:13px; padding:14px; border-bottom:1px solid #eef2ef; color:#2b3b34; text-align:left; vertical-align:top;}
.h2c .table th{ font-weight:600; background:#f8faf9; }
.h2c .table .left-hdr{ width:200px; }
.h2c .muted{ color:#6b7c74; font-size:12px; }

/* Series table helpers */
.table--series th[data-series-col].is-selected,
.table--series td[data-series-cell].is-selected{ background:#f3f7f5; }
.table--series .is-hidden{ display:none; }
.series-cell{ display:flex; flex-direction:column; align-items:center; gap:8px; text-align:center; }
.series-cell img{ width:24px; height:24px; object-fit:contain; }

/* Footer buttons */
.h2c .nav{ display:flex; justify-content:center; gap:12px; margin:22px 0 10px; }
.h2c .btn{ appearance:none; border:1px solid #d7e2dc; background:#fff; color:#2b3b34; padding:10px 16px; border-radius:999px; cursor:pointer; font-size:14px; }
.h2c .btn--primary{ background:var(--h2c-accent); border-color:var(--h2c-accent); color:#fff; }
.h2c .btn--primary:hover:not(:disabled){ opacity:.9; }
.h2c .btn--primary:disabled{ opacity:.5; }

/* Result */
.h2c .result-card{ max-width:420px; margin:0 auto; }
.h2c .result-card .card__img{ aspect-ratio:16/10; }
.h2c .cta{ display:inline-flex; align-items:center; gap:8px; padding:10px 16px; border-radius:999px; background:var(--h2c-accent); color:#fff; text-decoration:none; }
{%- endstylesheet -%}

<div class="h2c section_width_{{ section.settings.section_width }} section_content_width_{{ section.settings.section_content_width }}" data-section-id="{{ section.id }}">
  <div class="container">

    {%- assign steps = "Environment|Series|Screen Size|Mounting|Result" | split: "|" -%}
    <div class="progress" aria-label="Wizard progress">
      {%- for label in steps -%}
        <div class="progress__pill{% if forloop.index == 1 %} is-active{% endif %}" data-step-pill="{{ forloop.index }}">
          <span class="progress__num">{{ forloop.index }}</span>
          <span>{{ label }}</span>
        </div>
      {%- endfor -%}
    </div>

    {%- comment -%} STEP 1: ENVIRONMENT {%- endcomment -%}
    <section class="step is-active" data-step="1">
      <div class="step__head">
        <h2 class="step__title">{{ section.settings.step1_title }}</h2>
        <p class="step__sub">{{ section.settings.step1_sub }}</p>
      </div>

      <div class="grid grid--2" data-group="environment">
        {% for block in section.blocks %}
          {% if block.type == 'environment' %}
            <article class="card" data-value="{{ block.id }}" data-label="{{ block.settings.title | escape }}" {{ block.shopify_attributes }}>
              {% if block.settings.image != blank %}
                <img class="card__img" src="{{ block.settings.image | img_url: '800x' }}" alt="{{ block.settings.title | escape }}">
              {% endif %}
              <h3 class="card__title">{{ block.settings.title }}</h3>
              <p class="card__desc">{{ block.settings.desc }}</p>
              <span class="card__radio" aria-hidden="true"></span>
            </article>
          {% endif %}
        {% endfor %}
      </div>

      <div class="nav">
        <button class="btn btn--primary" data-next disabled>{{ section.settings.next_text }}</button>
      </div>
    </section>

    {%- comment -%} STEP 2: SERIES TABLE {%- endcomment -%}
    <section class="step" data-step="2">
      <div class="step__head">
        <h2 class="step__title">{{ section.settings.step2_title }}</h2>
        <p class="step__sub">{{ section.settings.step2_sub }}</p>
      </div>

      <div class="grid grid--1" data-group="series-table">
        <table class="table table--series" data-series-table>
          <thead>
            <tr>
              <th class="left-hdr">{{ section.settings.step2_left_header }}</th>
              {% for s in section.blocks %}
                {% if s.type == 'series' %}
                  {% assign envs = '' %}
                  {% if s.settings.show_full_sun %}{% assign envs = envs | append: 'full-sun,' %}{% endif %}
                  {% if s.settings.show_partial_sun %}{% assign envs = envs | append: 'partial-sun,' %}{% endif %}
                  {% if envs == '' %}{% assign envs = 'all' %}{% endif %}
                  <th scope="col"
                      class="series-col series-{{ s.id }}"
                      data-series-col="{{ s.id }}"
                      data-envs="{{ envs | strip }}"
                      data-label="{{ s.settings.title | escape }}"
                      {{ s.shopify_attributes }}
                      style="cursor:pointer">
                    <div style="display:flex; align-items:center; gap:8px;">
                      {% if s.settings.series_icon != blank %}
                        <img src="{{ s.settings.series_icon | img_url: '120x' }}" alt="{{ s.settings.title | escape }}" style="width:28px;height:28px;object-fit:cover;border-radius:6px;">
                      {% endif %}
                      <strong>{{ s.settings.title }}</strong>
                    </div>
                    <div class="muted">
                      {% if s.settings.show_full_sun %}Full Sun{% endif %}
                      {% if s.settings.show_full_sun and s.settings.show_partial_sun %} &middot; {% endif %}
                      {% if s.settings.show_partial_sun %}Partial Sun{% endif %}
                    </div>
                  </th>
                {% endif %}
              {% endfor %}
            </tr>
          </thead>
          <tbody>
            <tr data-row="smart">
              <th scope="row">{{ section.settings.row_label_smart }}</th>
              {% for s in section.blocks %}{% if s.type == 'series' %}
                <td class="series-col series-{{ s.id }}" data-series-cell="{{ s.id }}" data-series="{{ s.id }}" style="cursor:pointer">
                  <div class="series-cell">
                    {% if s.settings.smart_icon != blank %}<img src="{{ s.settings.smart_icon | img_url: '80x' }}" alt="">{% endif %}
                    <div>{{ s.settings.smart_value }}</div>
                  </div>
                </td>
              {% endif %}{% endfor %}
            </tr>
            <tr data-row="display">
              <th scope="row">{{ section.settings.row_label_display }}</th>
              {% for s in section.blocks %}{% if s.type == 'series' %}
                <td class="series-col series-{{ s.id }}" data-series-cell="{{ s.id }}" data-series="{{ s.id }}" style="cursor:pointer">
                  <div class="series-cell">
                    {% if s.settings.display_icon != blank %}<img src="{{ s.settings.display_icon | img_url: '80x' }}" alt="">{% endif %}
                    <div>{{ s.settings.display_value }}</div>
                  </div>
                </td>
              {% endif %}{% endfor %}
            </tr>
            <tr data-row="refresh">
              <th scope="row">{{ section.settings.row_label_refresh }}</th>
              {% for s in section.blocks %}{% if s.type == 'series' %}
                <td class="series-col series-{{ s.id }}" data-series-cell="{{ s.id }}" data-series="{{ s.id }}" style="cursor:pointer">
                  <div class="series-cell">
                    {% if s.settings.refresh_icon != blank %}<img src="{{ s.settings.refresh_icon | img_url: '80x' }}" alt="">{% endif %}
                    <div>{{ s.settings.refresh_value }}</div>
                  </div>
                </td>
              {% endif %}{% endfor %}
            </tr>
            <tr data-row="color">
              <th scope="row">{{ section.settings.row_label_color }}</th>
              {% for s in section.blocks %}{% if s.type == 'series' %}
                <td class="series-col series-{{ s.id }}" data-series-cell="{{ s.id }}" data-series="{{ s.id }}" style="cursor:pointer">
                  <div class="series-cell">
                    {% if s.settings.color_icon != blank %}<img src="{{ s.settings.color_icon | img_url: '80x' }}" alt="">{% endif %}
                    <div>{{ s.settings.color_value }}</div>
                  </div>
                </td>
              {% endif %}{% endfor %}
            </tr>
            <tr data-row="best">
              <th scope="row">{{ section.settings.row_label_best }}</th>
              {% for s in section.blocks %}{% if s.type == 'series' %}
                <td class="series-col series-{{ s.id }}" data-series-cell="{{ s.id }}" data-series="{{ s.id }}" style="cursor:pointer">
                  <div class="series-cell">
                    {% if s.settings.best_icon != blank %}<img src="{{ s.settings.best_icon | img_url: '80x' }}" alt="">{% endif %}
                    <div>{{ s.settings.best_value }}</div>
                  </div>
                </td>
              {% endif %}{% endfor %}
            </tr>
          </tbody>
        </table>
      </div>

      <div class="nav">
        <button class="btn" data-prev>{{ section.settings.prev_text }}</button>
        <button class="btn btn--primary" data-next disabled>{{ section.settings.next_text }}</button>
      </div>
    </section>

    {%- comment -%} STEP 3: SIZE (two tables) {%- endcomment -%}
    <section class="step" data-step="3">
      <div class="step__head">
        <h2 class="step__title">{{ section.settings.step3_title }}</h2>
        <p class="step__sub">{{ section.settings.step3_sub }}</p>
      </div>

      <!-- Table A: Viewing distance -->
      <div class="grid grid--1" data-group="size">
        <table class="table">
          <thead>
            <tr>
              <th>{{ section.settings.distance_col }}</th>
              <th>{{ section.settings.recommended_size_col }}</th>
            </tr>
          </thead>
          <tbody>
            {% for block in section.blocks %}
              {% if block.type == 'size_option' %}
                <tr class="size-row" data-value="{{ block.id }}" data-label="{{ block.settings.title | escape }}" style="cursor:pointer">
                  <td>{{ block.settings.title }}</td>
                  <td>{{ block.settings.recommended }}</td>
                </tr>
              {% endif %}
            {% endfor %}
          </tbody>
        </table>
        {% if section.settings.size_rule != blank %}
          <p class="muted" style="margin-top:8px">{{ section.settings.size_rule }}</p>
        {% endif %}
      </div>

      <!-- Table B: Based on outdoor setup -->
      <div class="step__head" style="margin-top:28px">
        <h3 class="step__title" style="font-size:20px">{{ section.settings.setup_title }}</h3>
        {% if section.settings.setup_sub != blank %}
          <p class="step__sub">{{ section.settings.setup_sub }}</p>
        {% endif %}
      </div>

      <div class="grid grid--1">
        <table class="table">
          <thead>
            <tr>
              <th>{{ section.settings.setup_col_space }}</th>
              <th>{{ section.settings.setup_col_sizes }}</th>
              <th>{{ section.settings.setup_col_why }}</th>
            </tr>
          </thead>
          <tbody>
            {% for block in section.blocks %}
              {% if block.type == 'setup_option' %}
                <tr class="setup-row" data-value="{{ block.id }}" data-label="{{ block.settings.space_label | escape }}" style="cursor:pointer">
                  <td>{{ block.settings.space_label }}</td>
                  <td>{{ block.settings.suggested_sizes }}</td>
                  <td>{{ block.settings.reason }}</td>
                </tr>
              {% endif %}
            {% endfor %}
          </tbody>
        </table>
      </div>

      <div class="nav">
        <button class="btn" data-prev>{{ section.settings.prev_text }}</button>
        <button class="btn btn--primary" data-next disabled>{{ section.settings.next_text }}</button>
      </div>
    </section>

    {%- comment -%} STEP 4: MOUNT OPTION {%- endcomment -%}
    <section class="step" data-step="4">
      <div class="step__head">
        <h2 class="step__title">{{ section.settings.step4_title }}</h2>
        <p class="step__sub">{{ section.settings.step4_sub }}</p>
      </div>

      <div class="grid grid--3" data-group="mount">
        {% for block in section.blocks %}
          {% if block.type == 'mount_option' %}
            <article class="card" data-value="{{ block.id }}" data-label="{{ block.settings.title | escape }}" {{ block.shopify_attributes }}>
              {% if block.settings.image != blank %}
                <img class="card__img" src="{{ block.settings.image | img_url: '600x' }}" alt="{{ block.settings.title | escape }}">
              {% endif %}
              <h3 class="card__title">{{ block.settings.title }}</h3>
              <p class="card__desc">{{ block.settings.desc }}</p>
              <span class="card__radio" aria-hidden="true"></span>
            </article>
          {% endif %}
        {% endfor %}
      </div>

      <div class="nav">
        <button class="btn" data-prev>{{ section.settings.prev_text }}</button>
        <button class="btn btn--primary" data-next disabled>{{ section.settings.next_text }}</button>
      </div>
    </section>

    {%- comment -%} STEP 5: RESULT {%- endcomment -%}
    <section class="step" data-step="5">
      <div class="step__head">
        <h2 class="step__title">{{ section.settings.step5_title }}</h2>
        <p class="step__sub">{{ section.settings.step5_sub }}</p>
      </div>

      <div class="result-card card" id="h2c-result">
        <img class="card__img" id="h2c-result-image" src="{{ section.settings.fallback_image | img_url: '800x' }}" alt="" loading="lazy">
        <h3 class="card__title" id="h2c-result-title">{{ section.settings.fallback_title }}</h3>
        <p class="card__desc" id="h2c-result-desc"></p>
        <div id="h2c-result-cta" style="margin-top:12px;"></div>
      </div>

      <div class="nav">
        <button class="btn" data-prev>{{ section.settings.prev_text }}</button>
        <button class="btn btn--primary" data-restart style="display:none">{{ section.settings.restart_text }}</button>
      </div>
    </section>

  </div>
</div>

<script>
(() => {
  const root = document.querySelector('.h2c[data-section-id="{{ section.id }}"]');
  if (!root) return;

  const state = { env:null, envKey:'all', series:null, size:null, mount:null };
  const steps = [...root.querySelectorAll('.step')];
  const pills = [...root.querySelectorAll('[data-step-pill]')];

  function goto(stepIdx){
    steps.forEach(s=>s.classList.remove('is-active'));
    pills.forEach(p=>p.classList.remove('is-active'));
    root.querySelector(`.step[data-step="${stepIdx}"]`)?.classList.add('is-active');
    root.querySelector(`[data-step-pill="${stepIdx}"]`)?.classList.add('is-active');
  }
  function selectCard(scope, el){
    root.querySelectorAll(`${scope} .card, ${scope} .size-row, ${scope} .setup-row`).forEach(c=>c.classList.remove('is-selected'));
    el.classList.add('is-selected');
  }
  function toggleNextButton(step, enable){
    const btn = root.querySelector(`.step[data-step="${step}"] [data-next]`);
    if(!btn) return;
    btn.disabled = !enable;
    if(enable){ btn.style.removeProperty('display'); btn.removeAttribute('aria-disabled'); }
  }

  /* Step 2 helpers */
  function clearSeriesSelection(){
    root.querySelectorAll('[data-series-col],[data-series-cell]').forEach(el=>el.classList.remove('is-selected'));
    state.series = null;
  }
  function selectSeriesColumn(seriesId, label){
    clearSeriesSelection();
    root.querySelectorAll(`[data-series-col="${seriesId}"],[data-series-cell="${seriesId}"]`).forEach(el=>el.classList.add('is-selected'));
    state.series = { id:seriesId, label };
    toggleNextButton(2, true);
  }
  function filterSeriesColumnsByEnv(){
    const key = state.envKey || 'all';
    const heads = [...root.querySelectorAll('th[data-series-col]')];
    const cells = [...root.querySelectorAll('td[data-series-cell]')];

    heads.forEach(h=>{
      const raw = (h.dataset.envs || 'all').toLowerCase();
      const show = raw.includes('all') || raw.split(',').map(v=>v.trim()).includes(key);
      h.classList.toggle('is-hidden', !show);
    });
    cells.forEach(td=>{
      const sid = td.dataset.series;
      const head = root.querySelector(`th[data-series-col="${sid}"]`);
      const show = head && !head.classList.contains('is-hidden');
      td.classList.toggle('is-hidden', !show);
      if(!show) td.classList.remove('is-selected');
    });
    if(state.series){
      const head = root.querySelector(`th[data-series-col="${state.series.id}"]`);
      if(!head || head.classList.contains('is-hidden')){
        clearSeriesSelection();
        toggleNextButton(2, false);
      }
    }
  }

  /* Step 1 */
  root.querySelectorAll('[data-group="environment"] .card').forEach(card=>{
    card.addEventListener('click',()=>{
      selectCard('[data-group="environment"]', card);
      state.env = { id:card.dataset.value, label:card.dataset.label };
      const ll = (state.env.label || '').toLowerCase();
      state.envKey = ll.includes('full') ? 'full-sun' : (ll.includes('partial') ? 'partial-sun' : 'all');
      toggleNextButton(1, true);
      filterSeriesColumnsByEnv();
    });
  });

  /* Step 2 selection */
  root.querySelectorAll('th[data-series-col]').forEach(head=>{
    head.addEventListener('click',()=>selectSeriesColumn(head.dataset.seriesCol, head.dataset.label));
  });
  root.querySelectorAll('td[data-series-cell]').forEach(cell=>{
    cell.addEventListener('click',()=>{
      const sid = cell.dataset.series;
      const head = root.querySelector(`th[data-series-col="${sid}"]`);
      const label = head ? head.dataset.label : '';
      selectSeriesColumn(sid, label);
    });
  });

  /* Step 3A: distance rows */
  root.querySelectorAll('.size-row').forEach(row=>{
    row.addEventListener('click',()=>{
      root.querySelectorAll('.size-row, .setup-row').forEach(r => r.classList.remove('is-selected'));
      row.classList.add('is-selected');
      state.size = { id:row.dataset.value, label:row.dataset.label };
      toggleNextButton(3, true);
    });
  });

  /* Step 3B: setup rows */
  root.querySelectorAll('.setup-row').forEach(row=>{
    row.addEventListener('click',()=>{
      root.querySelectorAll('.size-row, .setup-row').forEach(r => r.classList.remove('is-selected'));
      row.classList.add('is-selected');
      state.size = { id:row.dataset.value, label:row.dataset.label };
      toggleNextButton(3, true);
    });
  });

  /* Step 4 */
  root.querySelectorAll('[data-group="mount"] .card').forEach(card=>{
    card.addEventListener('click',()=>{
      selectCard('[data-group="mount"]', card);
      state.mount = { id:card.dataset.value, label:card.dataset.label };
      toggleNextButton(4, true);
    });
  });

  /* Navigation */
  root.querySelectorAll('[data-next]').forEach(btn=>{
    btn.addEventListener('click',()=>{
      const step = +btn.closest('.step').dataset.step;
      if(step===1 && !state.env)   return alert('{{ section.settings.alert_pick_env | escape }}');
      if(step===2 && !state.series) return alert('{{ section.settings.alert_pick_series | escape }}');
      if(step===3 && !state.size)   return alert('{{ section.settings.alert_pick_size | escape }}');
      if(step===4 && !state.mount)  return alert('{{ section.settings.alert_pick_mount | escape }}');
      if(step===4) buildResult();
      goto(step+1);
      root.querySelector('[data-restart]')?.style.setProperty('display', step+1===5 ? 'inline-flex' : 'none');
    });
  });
  root.querySelectorAll('[data-prev]').forEach(btn=>{
    btn.addEventListener('click',()=>{
      const step = +btn.closest('.step').dataset.step;
      goto(Math.max(1, step-1));
    });
  });
  root.querySelector('[data-restart]')?.addEventListener('click',()=>{
    Object.keys(state).forEach(k=>state[k]=null);
    root.querySelectorAll('.is-selected').forEach(el=>el.classList.remove('is-selected'));
    [1,2,3,4].forEach(s=>toggleNextButton(s,false));
    goto(1);
  });

  function buildResult(){
    const titleEl = root.querySelector('#h2c-result-title');
    const descEl  = root.querySelector('#h2c-result-desc');
    const imgEl   = root.querySelector('#h2c-result-image');
    const ctaWrap = root.querySelector('#h2c-result-cta');

    const rules = [...root.querySelectorAll('[data-rule]')].map(r=>({
      env:r.dataset.env, series:r.dataset.series, size:r.dataset.size, mount:r.dataset.mount,
      title:r.dataset.title, url:r.dataset.url, image:r.dataset.image, cta:r.dataset.cta
    }));

    const match = rules.find(r => r.env===state.env?.id && r.series===state.series?.id && r.size===state.size?.id && r.mount===state.mount?.id);

    if(match){
      titleEl.textContent = match.title || `${state.series.label} + ${state.mount.label}`;
      descEl.textContent  = `${state.series.label} • ${state.size.label} • ${state.mount.label}`;
      if(match.image) imgEl.src = match.image;
      ctaWrap.innerHTML = match.url ? `<a class="cta" href="${match.url}">${match.cta || '{{ section.settings.default_cta | escape }}'}</a>` : '';
    } else {
      titleEl.textContent = `${state.series?.label || ''} + ${state.mount?.label || ''}`.trim();
      descEl.textContent  = `${state.env?.label || ''} • ${state.size?.label || ''}`.trim();
      imgEl.src = '{{ section.settings.fallback_image | img_url: '800x' }}';
      ctaWrap.innerHTML = '';
    }
  }

  [1,2,3,4].forEach(s=>toggleNextButton(s,false));
  goto(1);
})();
</script>

{%- comment -%} Hidden rule dataset for JS lookup (optional) {%- endcomment -%}
<div style="display:none">
  {% for rule in section.blocks %}
    {% if rule.type == 'rule' %}
      {% assign product_obj = rule.settings.product %}
      <div
        data-rule
        data-env="{{ rule.settings.env_ref }}"
        data-series="{{ rule.settings.series_ref }}"
        data-size="{{ rule.settings.size_ref }}"
        data-mount="{{ rule.settings.mount_ref }}"
        data-title="{{ rule.settings.override_title | escape }}"
        data-cta="{{ rule.settings.override_cta | escape }}"
        data-url="{% if product_obj %}{{ product_obj.url }}{% else %}{{ rule.settings.custom_url }}{% endif %}"
        data-image="{% if product_obj and product_obj.featured_image %}{{ product_obj.featured_image | img_url: '800x' }}{% endif %}"
      ></div>
    {% endif %}
  {% endfor %}
</div>

{% schema %}
{
  "name": "How to Choose – Wizard",
  "tag": "section",
  "class": "h2c-wrapper",
  "settings": [
    { "type": "color", "id": "accent_color", "label": "Accent color", "default": "#234f3f" },
    { "type": "range", "id": "max_width", "label": "Max width (px)", "min": 900, "max": 1600, "step": 50, "default": 1150 },

    { "type": "select", "id": "section_width", "label": "Section Width", "default": "standard",
      "options": [ { "value": "standard", "label": "50% Width" }, { "value": "full", "label": "Full Width" } ] },
    { "type": "select", "id": "section_content_width", "label": "Content Width", "default": "standard",
      "options": [ { "value": "standard", "label": "50% Width" }, { "value": "full", "label": "Full Width" } ] },

    { "type": "text", "id": "prev_text", "label": "Previous button text", "default": "Previous" },
    { "type": "text", "id": "next_text", "label": "Next button text", "default": "Next" },
    { "type": "text", "id": "restart_text", "label": "Restart button text", "default": "Start again" },

    { "type": "text", "id": "alert_pick_env", "label": "Alert: pick environment", "default": "Please choose your installation environment." },
    { "type": "text", "id": "alert_pick_series", "label": "Alert: pick series", "default": "Please choose the right series." },
    { "type": "text", "id": "alert_pick_size", "label": "Alert: pick size", "default": "Please choose a viewing distance." },
    { "type": "text", "id": "alert_pick_mount", "label": "Alert: pick mount", "default": "Please choose your mounting option." },

    { "type": "text", "id": "step1_title", "label": "Step 1 title", "default": "Choose Your Installation Environment" },
    { "type": "textarea", "id": "step1_sub", "label": "Step 1 subtitle", "default": "Where do you plan to place the TV? Select the scene that best fits your space." },

    { "type": "text", "id": "step2_title", "label": "Step 2 title", "default": "Choose the Right Series for Your Needs" },
    { "type": "textarea", "id": "step2_sub", "label": "Step 2 subtitle", "default": "Select what fits you best." },
    { "type": "text", "id": "step2_left_header", "label": "Step 2 left header", "default": "Specifications" },

    { "type": "text", "id": "row_label_smart", "label": "Row label: Smart System", "default": "Smart System" },
    { "type": "text", "id": "row_label_display", "label": "Row label: Display Type", "default": "Display Type" },
    { "type": "text", "id": "row_label_refresh", "label": "Row label: Refresh Rate", "default": "Refresh Rate" },
    { "type": "text", "id": "row_label_color", "label": "Row label: Color Accuracy", "default": "Color Accuracy" },
    { "type": "text", "id": "row_label_best", "label": "Row label: Best For", "default": "Best For" },

    { "type": "text", "id": "step3_title", "label": "Step 3 title", "default": "Choose the Right Screen Size" },
    { "type": "textarea", "id": "step3_sub", "label": "Step 3 subtitle", "default": "How to choose:" },
    { "type": "text", "id": "distance_col", "label": "Distance column header", "default": "Viewing Distance" },
    { "type": "text", "id": "recommended_size_col", "label": "Recommended size column header", "default": "Recommended Screen Size" },
    { "type": "text", "id": "size_rule", "label": "Rule of thumb text", "default": "Rule of Thumb: Viewing distance (in inches) ÷ 1.5 ≈ optimal screen size." },

    { "type": "text", "id": "setup_title", "label": "Step 3B title", "default": "Choose Based on Your Outdoor Setup:" },
    { "type": "text", "id": "setup_sub", "label": "Step 3B subtitle", "default": "Setup" },
    { "type": "text", "id": "setup_col_space", "label": "Setup column: Outdoor Space Type", "default": "Outdoor Space Type" },
    { "type": "text", "id": "setup_col_sizes", "label": "Setup column: Suggest Size(s)", "default": "Suggest Size(s)" },
    { "type": "text", "id": "setup_col_why", "label": "Setup column: Why?", "default": "Why?" },

    { "type": "text", "id": "step4_title", "label": "Step 4 title", "default": "Choose Your Mounting Option" },
    { "type": "textarea", "id": "step4_sub", "label": "Step 4 subtitle", "default": "Pick the setup style that fits your space." },

    { "type": "text", "id": "step5_title", "label": "Step 5 title", "default": "Your Result" },
    { "type": "textarea", "id": "step5_sub", "label": "Step 5 subtitle", "default": "Here’s the best match for your setup." },
    { "type": "text", "id": "default_cta", "label": "Default CTA label", "default": "Buy it now" },
    { "type": "image_picker", "id": "fallback_image", "label": "Fallback result image" },
    { "type": "text", "id": "fallback_title", "label": "Fallback result title", "default": "Recommended setup" }
  ],
  "blocks": [
    {
      "type": "environment",
      "name": "Environment",
      "settings": [
        { "type": "text", "id": "title", "label": "Title", "default": "Full Sun (Direct Sunlight)" },
        { "type": "textarea", "id": "desc", "label": "Description", "default": "For areas completely exposed to sunlight." },
        { "type": "image_picker", "id": "image", "label": "Image" }
      ]
    },
    {
      "type": "series",
      "name": "Series",
      "settings": [
        { "type": "text", "id": "title", "label": "Series name", "default": "Deck Pro QLED 2.0" },
        { "type": "image_picker", "id": "series_icon", "label": "Series icon" },

        { "type": "paragraph", "content": "Visibility" },
        { "type": "checkbox", "id": "show_full_sun", "label": "Full Sun", "default": true },
        { "type": "checkbox", "id": "show_partial_sun", "label": "Partial Sun", "default": true },

        { "type": "header", "content": "Smart System" },
        { "type": "text", "id": "smart_value", "label": "Value", "default": "Google TV" },
        { "type": "image_picker", "id": "smart_icon", "label": "Icon (optional)" },

        { "type": "header", "content": "Display Type" },
        { "type": "text", "id": "display_value", "label": "Value", "default": "LED" },
        { "type": "image_picker", "id": "display_icon", "label": "Icon (optional)" },

        { "type": "header", "content": "Refresh Rate" },
        { "type": "text", "id": "refresh_value", "label": "Value", "default": "60HZ" },
        { "type": "image_picker", "id": "refresh_icon", "label": "Icon (optional)" },

        { "type": "header", "content": "Color Accuracy" },
        { "type": "text", "id": "color_value", "label": "Value", "default": "Good" },
        { "type": "image_picker", "id": "color_icon", "label": "Icon (optional)" },

        { "type": "header", "content": "Best For" },
        { "type": "text", "id": "best_value", "label": "Value", "default": "Smart & Value" },
        { "type": "image_picker", "id": "best_icon", "label": "Icon (optional)" }
      ]
    },
    {
      "type": "size_option",
      "name": "Screen size",
      "settings": [
        { "type": "text", "id": "title", "label": "Viewing distance label", "default": "6–8 ft (1.8–2.4 m)" },
        { "type": "text", "id": "recommended", "label": "Recommended size", "default": "55\"" }
      ]
    },
    {
      "type": "setup_option",
      "name": "Setup row",
      "settings": [
        { "type": "text", "id": "space_label", "label": "Outdoor space type", "default": "Medium deck or pergola" },
        { "type": "text", "id": "suggested_sizes", "label": "Suggest size(s)", "default": "55\"/65\"" },
        { "type": "text", "id": "reason", "label": "Why?", "default": "Balanced size for multi-person viewing" }
      ]
    },
    {
      "type": "mount_option",
      "name": "Mount option",
      "settings": [
        { "type": "text", "id": "title", "label": "Title", "default": "Wall Mount" },
        { "type": "textarea", "id": "desc", "label": "Description", "default": "Best for solid walls, patios, or decks." },
        { "type": "image_picker", "id": "image", "label": "Image" }
      ]
    },
    {
      "type": "rule",
      "name": "Result rule",
      "settings": [
        { "type": "header", "content": "Match criteria" },
        { "type": "text", "id": "env_ref", "label": "Environment BLOCK ID", "default": "-" },
        { "type": "text", "id": "series_ref", "label": "Series BLOCK ID", "default": "-" },
        { "type": "text", "id": "size_ref", "label": "Size option BLOCK ID", "default": "-" },
        { "type": "text", "id": "mount_ref", "label": "Mount option BLOCK ID", "default": "-" },

        { "type": "header", "content": "Result" },
        { "type": "product", "id": "product", "label": "Recommended product" },
        { "type": "url", "id": "custom_url", "label": "Custom link (overrides product url)" },
        { "type": "text", "id": "override_title", "label": "Override result title", "default": "-" },
        { "type": "text", "id": "override_cta", "label": "Override CTA label", "default": "-" }
      ]
    }
  ],
  "max_blocks": 200,
  "presets": [{ "name": "How to Choose – Wizard", "category": "Custom" }]
}
{% endschema %}
